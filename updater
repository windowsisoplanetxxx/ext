// ==UserScript==
// @name         HP Support Video Extractor
// @namespace    http://tampermonkey.net/
// @version      1.2
// @description  Extract video links/thumbnails across multiple HP support languages
// @match        https://support.hp.com/*/document/ish_*
// @match        https://support.hp.com/*/error/*
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_deleteValue
// ==/UserScript==

(function() {
    "use strict";

    const AVAILABLE_LANGS = [
        {code: "us-en", name: "English (US)"},
        {code: "fr-fr", name: "French (France)"},
        {code: "pt-pt", name: "Portuguese (Portugal)"},
        {code: "pl-pl", name: "Polish (Poland)"},
        {code: "de-de", name: "German (Germany)"},
        {code: "cn-zh", name: "Chinese (China)"},
        {code: "jp-ja", name: "Japanese (Japan)"},
        {code: "kr-ko", name: "Korean (Korea)"},
        {code: "es-es", name: "Spanish (Spain)"},
        {code: "se-sv", name: "Swedish (Sweden)"},
        {code: "tr-tr", name: "Turkish (Turkey)"},
        {code: "nl-nl", name: "Dutch (Netherlands)"},
        {code: "th-th", name: "Thai (Thailand)"},
        {code: "dk-da", name: "Danish (Denmark)"}
    ];


async function checkForUpdates() {
    try {
        const currentVersion = "1.2"; // Your current version
        const updateURL = "https://raw.githubusercontent.com/windowsisoplanetxxx/ext/main/script.user.js?" + Date.now();

        const response = await fetch(updateURL);
        const scriptText = await response.text();

        const match = scriptText.match(/@version\s+([0-9.]+)/);

        if (match) {
            const latestVersion = match[1];
            console.log("Latest version:", latestVersion);

            if (latestVersion > currentVersion) {
                showUpdateNotification({ version: latestVersion });
            } else {
                console.log("Already up to date.");
            }
        } else {
            console.log("No @version found in script.");
        }
    } catch (error) {
        console.log("Update check failed:", error);
    }
}



function showUpdateNotification(updateInfo) {
    const notification = document.createElement("div");
    notification.innerHTML = `
        <div style="position: fixed; top: 60px; right: 10px; background: #007bff; color: white; padding: 15px; border-radius: 8px; z-index: 999999; box-shadow: 0 4px 12px rgba(0,0,0,0.3);">
            <div style="font-weight: bold; margin-bottom: 8px;">🚀 Update Available!</div>
            <div style="margin-bottom: 8px;">Version ${updateInfo.version}</div>
            <div style="font-size: 12px; margin-bottom: 10px;">${updateInfo.changelog}</div>
            <button id="update-now" style="background: white; color: #007bff; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; margin-right: 5px;">Update Now</button>
            <button id="dismiss-update" style="background: transparent; color: white; border: 1px solid white; padding: 5px 10px; border-radius: 4px; cursor: pointer;">Later</button>
        </div>
    `;

    document.body.appendChild(notification);

    document.getElementById("update-now").onclick = () => {
        window.open(updateInfo.downloadURL, '_blank');
    };

    document.getElementById("dismiss-update").onclick = () => {
        notification.remove();
    };
}
    async function getSelectedLanguages() {
        const selected = await GM_getValue("selected_languages", []);
        return Array.isArray(selected) ? selected : [];
    }

    async function setSelectedLanguages(languages) {
        await GM_setValue("selected_languages", languages);
    }

    async function hasConfiguredLanguages() {
        const selected = await getSelectedLanguages();
        return selected.length > 0;
    }

    async function getLanguagesForExtraction() {
        const selected = await getSelectedLanguages();
        return selected.length > 0 ? selected : AVAILABLE_LANGS.map(l => l.code);
    }

    async function getWaitTime() {
        const waitTime = await GM_getValue("wait_time", 3);
        return Math.max(1, Math.min(10, waitTime));
    }

    async function setWaitTime(seconds) {
        const clampedTime = Math.max(1, Math.min(10, seconds));
        await GM_setValue("wait_time", clampedTime);
    }

    function delay(ms) {
        return new Promise(res => setTimeout(res, ms));
    }

    function getShortLC(lc) {
        const parts = lc.toLowerCase().split("-");
        return parts.length > 1 ? parts[1] : parts[0];
    }

function isErrorPage() {
    return window.location.pathname.includes('/error/') ||
           window.location.href.includes('errorType=500') ||
           window.location.href.includes('/error/500') ||
           document.title.toLowerCase().includes('error') ||
           document.querySelector('.error-container') !== null ||
           document.querySelector('.error-message') !== null;
}

    function getDocUrlParts() {
        let parts = window.location.pathname.split('/');
        return parts;
    }

    function extractVideos(currentLC) {
        let containers = document.querySelectorAll(".bcSingleVideoContainer");
        let videos = [];
        containers.forEach((container, idx) => {
            const thumbnailImg = container.querySelector("img.thumbnail-img");
            const embedLink = container.querySelector('link[itemprop="embedURL"]');
            const titleDiv = container.querySelector(".video-title");
            if(thumbnailImg && embedLink && titleDiv){
                videos.push({
                    lc: currentLC,
                    thumbnail: thumbnailImg.src,
                    embedURL: embedLink.href,
                    title: titleDiv.textContent.trim()
                });
            }
        });
        return videos;
    }

function addCompactStyles() {
    if (document.getElementById('compact-styles')) return;

    const style = document.createElement("style");
    style.id = 'compact-styles';
    style.textContent = `
        @keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
        @keyframes pulse-glow{0%,100%{box-shadow:0 2px 4px rgba(220,53,69,0.3);transform:scale(1)}50%{box-shadow:0 4px 20px rgba(220,53,69,0.6);transform:scale(1.05)}}
        @keyframes text-fade{0%,100%{opacity:1}50%{opacity:0.6}}
        .modal-overlay{position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,0.8);z-index:999999;display:flex;justify-content:center;align-items:center;padding:20px;box-sizing:border-box}
        .extraction-overlay{position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,0.7);backdrop-filter:blur(12px);z-index:999998;display:flex;flex-direction:column;justify-content:center;align-items:center;gap:25px;transition:opacity 0.3s ease}
        .extraction-content{background:rgba(255,255,255,0.95);border-radius:20px;padding:40px 50px;box-shadow:0 20px 60px rgba(0,0,0,0.3);backdrop-filter:blur(10px);border:1px solid rgba(255,255,255,0.2);display:flex;flex-direction:column;align-items:center;gap:20px;min-width:350px;text-align:center}
        .extraction-spinner{width:50px;height:50px;border:4px solid rgba(0,123,255,0.2);border-top:4px solid #007bff;border-radius:50%;animation:spin 1s linear infinite}
        .extraction-text{font-size:22px;font-weight:600;color:#2c3e50;margin:0;font-family:'Segoe UI',Tahoma,Geneva,Verdana,sans-serif}
        .extraction-progress{font-size:16px;color:#5a6c7d;margin:5px 0 15px 0;font-weight:500}
        .extraction-stop-btn{padding:12px 24px;background:linear-gradient(135deg,#e74c3c,#c0392b);color:white;border:none;border-radius:8px;font-size:14px;font-weight:600;cursor:pointer;transition:all 0.3s ease;box-shadow:0 4px 15px rgba(231,76,60,0.3);min-width:120px}
        .extraction-stop-btn:hover{background:linear-gradient(135deg,#c0392b,#a93226);transform:translateY(-2px);box-shadow:0 6px 20px rgba(231,76,60,0.4)}
        .extraction-stop-btn:active{transform:translateY(0);box-shadow:0 2px 10px rgba(231,76,60,0.3)}
        .modal-container{background:white;padding:30px;border-radius:12px;box-shadow:0 8px 32px rgba(0,0,0,0.3);max-height:90vh;overflow-y:auto}
        .input-base{width:100%;padding:8px 12px;border:1px solid #ced4da;border-radius:4px;font-size:14px;box-sizing:border-box}
        .input-base:focus{outline:none;border-color:#80bdff;box-shadow:0 0 0 0.2rem rgba(0,123,255,0.25)}
        .vscode-container{background:#1e1e1e;border:1px solid #3c3c3c;border-radius:6px;overflow:hidden}
        .vscode-header{background:#2d2d30;border-bottom:1px solid #3c3c3c;padding:8px 12px;display:flex;align-items:center;gap:8px;font-size:13px;color:#cccccc}
        .vscode-tab{background:#1e1e1e;border:1px solid #3c3c3c;border-bottom:none;padding:6px 12px;border-radius:4px 4px 0 0;font-size:13px;color:#cccccc;display:flex;align-items:center;gap:6px}
        .vscode-content{background:#1e1e1e;position:relative;height:500px;overflow:hidden}
        .vscode-line-numbers{position:absolute;left:0;top:0;width:50px;height:100%;background:#1e1e1e;border-right:1px solid #3c3c3c;padding:16px 8px 16px 0;font-family:'Consolas','Monaco','Courier New',monospace;font-size:14px;line-height:21px;color:#858585;user-select:none;overflow:hidden;text-align:right;box-sizing:border-box;z-index:2}
        .vscode-code-display{background:#1e1e1e;color:#d4d4d4;font-family:'Consolas','Monaco','Courier New',monospace;font-size:14px;line-height:21px;padding:16px;padding-left:66px;white-space:pre;overflow:auto;height:100%;box-sizing:border-box;position:relative;z-index:1}
        .yaml-key{color:#9cdcfe} .yaml-string{color:#ce9178} .yaml-number{color:#b5cea8} .yaml-boolean{color:#569cd6} .yaml-null{color:#569cd6} .yaml-comment{color:#6a9955} .yaml-url{color:#4fc1ff;text-decoration:underline} .yaml-variable{color:#dcdcaa}
        .warning-modal{background:#fff3cd;border:2px solid #ffc107;color:#856404}
        .warning-icon{color:#ffc107;font-size:32px;margin-right:15px}
        .hover-card{transition:all 0.3s ease;cursor:pointer}
        .hover-card:hover{transform:translateY(-5px) scale(1.02);box-shadow:0 8px 16px rgba(0,0,0,0.2)}
        .tooltip{position:absolute;bottom:100%;left:50%;transform:translateX(-50%);background:#333;color:white;padding:6px 10px;border-radius:4px;font-size:11px;white-space:nowrap;z-index:1000;opacity:0;visibility:hidden;transition:all 0.3s ease;max-width:300px;word-break:break-all}
        .tooltip::after{content:'';position:absolute;top:100%;left:50%;transform:translateX(-50%);width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid #333}
        .data-table{width:100%;border-collapse:collapse;font-size:12px;font-family:'Segoe UI',Tahoma,Geneva,Verdana,sans-serif}
        .data-table th{padding:12px 8px;text-align:left;font-weight:600;color:#495057;background:#f8f9fa;border-right:1px solid #dee2e6;position:sticky;top:0;z-index:10}
        .data-table td{padding:10px 8px;border-right:1px solid #dee2e6;cursor:pointer;position:relative;max-width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;transition:all 0.2s ease}
        .data-table tr{border-bottom:1px solid #dee2e6;transition:background-color 0.2s ease}
        .data-table tr:hover{background:#f8f9fa}
        .data-table td:hover{background:#e3f2fd;transform:scale(1.02)}
        .grid-auto{display:grid;grid-template-columns:repeat(auto-fit,minmax(180px,1fr));gap:15px}
        .grid-thumb{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:15px}
        .btn-base,button{padding:8px 16px;border:none;border-radius:6px;font-size:14px;font-weight:500;cursor:pointer;transition:all 0.2s ease;box-shadow:0 2px 4px rgba(0,0,0,0.1)}
        .btn-primary{background:linear-gradient(135deg,#007bff,#0056b3);color:white}
        .btn-success{background:linear-gradient(135deg,#28a745,#1e7e34);color:white}
        .btn-danger{background:linear-gradient(135deg,#dc3545,#c82333);color:white}
        .btn-secondary{background:linear-gradient(135deg,#6c757d,#545b62);color:white}
        .btn-warning{background:linear-gradient(135deg,#ffc107,#e0a800);color:#212529}
        .btn-base:hover,button:hover{transform:translateY(-1px);box-shadow:0 4px 8px rgba(0,0,0,0.15)}
        .btn-base:active,button:active{transform:translateY(0);box-shadow:0 1px 3px rgba(0,0,0,0.2)}
        .btn-base:disabled,button:disabled{opacity:0.6;cursor:not-allowed;transform:none!important}
        .replace-thumbnails-attention{animation:pulse-glow 2s ease-in-out infinite,text-fade 1.5s ease-in-out infinite}
        .replace-thumbnails-attention:hover{animation-play-state:paused}
    `;
    document.head.appendChild(style);
}

    function animateWindowIn(overlay, container) {
        overlay.style.opacity = "0";
        container.style.transform = "scale(0.8) translateY(-20px)";
        container.style.transition = "all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1)";
        overlay.style.transition = "opacity 0.3s ease";
        requestAnimationFrame(() => {
            overlay.style.opacity = "1";
            container.style.transform = "scale(1) translateY(0)";
        });
    }

    function animateWindowOut(overlay, callback) {
        const container = overlay.querySelector('div');
        if (container) container.style.transform = "scale(0.9) translateY(-10px)";
        overlay.style.opacity = "0";
        setTimeout(() => { if (callback) callback(); }, 300);
    }

function createButton(text, className = "", styles = {}) {
    const btn = document.createElement("button");
    btn.textContent = text;
    btn.className = `btn-base ${className}`;
    Object.assign(btn.style, styles);
    return btn;
}

async function updateExtractButtonProgress(current, total) {
    const extractBtn = document.getElementById("extract-btn");
    if (!extractBtn) return;

    const waitTime = await getWaitTime();
    extractBtn.textContent = `Extracting ${current}/${total} (${waitTime}s)`;
    extractBtn.disabled = true;
    extractBtn.style.cursor = "not-allowed";

    showExtractionOverlay(current, total, waitTime);

    let timeLeft = waitTime;
    const countdownInterval = setInterval(() => {
        timeLeft--;
        if (timeLeft >= 0) {
            extractBtn.textContent = `Extracting ${current}/${total} (${timeLeft}s)`;
            updateExtractionProgress(current, total, timeLeft);
        } else {
            clearInterval(countdownInterval);
        }
    }, 1000);

    setTimeout(() => {
        clearInterval(countdownInterval);
        hideExtractionOverlay();
    }, waitTime * 1000);

    const existingStopBtn = document.getElementById("stop-extraction-btn");
    if (existingStopBtn) existingStopBtn.remove();
}

async function resetExtractButton() {
    const extractBtn = document.getElementById("extract-btn");
    if (!extractBtn) return;

    hideExtractionOverlay();

    extractBtn.disabled = false;
    extractBtn.style.cursor = "pointer";
    await updateExtractButtonText();

    const stopBtn = document.getElementById("stop-extraction-btn");
    if (stopBtn) stopBtn.remove();

    const overlayStopBtn = document.getElementById("extraction-overlay-stop-btn");
    if (overlayStopBtn) overlayStopBtn.remove();
}

    async function updateExtractButtonForVideos() {
        const extractBtn = document.getElementById("extract-btn");
        if (!extractBtn) return;
        await delay(2000);
        const currentLC = window.location.pathname.split("/")[1];
        const videos = extractVideos(currentLC);
        if (videos.length === 0) {
            extractBtn.textContent = "No videos";
            extractBtn.style.cursor = "not-allowed";
            extractBtn.disabled = true;
            extractBtn.onclick = () => {};
        } else {
            extractBtn.textContent = "Extract";

            extractBtn.style.cursor = "pointer";
            extractBtn.disabled = false;
            extractBtn.onclick = async () => {
                showLanguageConfigGUI();
                console.log ("button pressed");
                checkForUpdates();
            };
        }
    }

    function createExtractButton() {
        const extractBtn = createButton("Extract", "btn-primary", {
            position: "fixed", top: "10px", right: "10px", zIndex: 99999,
            boxShadow: "0 2px 4px rgba(0,0,0,0.2)"
        });
        extractBtn.id = "extract-btn";
        document.body.appendChild(extractBtn);
        return extractBtn;
    }

    async function updateExtractButtonText() {
        const extractBtn = document.getElementById("extract-btn");
        if (!extractBtn) return;
        const selectedLanguages = await getSelectedLanguages();
        extractBtn.style.transition = "all 0.3s ease";
        if (selectedLanguages.length > 0) {
            extractBtn.textContent = `Extract (${selectedLanguages.length} langs)`;
            extractBtn.style.transform = "scale(1.05)";
            setTimeout(() => {
                extractBtn.style.transform = "scale(1)";
            }, 200);
        } else {
            extractBtn.textContent = "Extract (Configure first)";
            extractBtn.style.transform = "scale(1.05)";
            setTimeout(() => {
                extractBtn.style.transform = "scale(1)";
            }, 200);
        }
    }

    function insertImageModalPlain(textarea) {
        const overlay = document.createElement('div');
        overlay.className = 'modal-overlay';
        overlay.style.zIndex = '9999999';

        const container = document.createElement('div');
        container.className = 'modal-container';
        container.style.maxWidth = '400px';
        container.innerHTML = `
            <h3>Insert Image</h3>
            <label for="image-url">Enter image link here:</label>
            <input type="text" id="image-url" class="input-base" placeholder="">
            <div style="display: flex; gap: 10px; justify-content: flex-end; margin-top: 15px;">
                <button id="cancel-image" class="btn-base btn-danger">Cancel</button>
                <button id="insert-image" class="btn-base btn-primary">Insert</button>
            </div>
        `;

        overlay.appendChild(container);
        document.body.appendChild(overlay);

        const imageUrlInput = container.querySelector('#image-url');
        const insertBtn = container.querySelector('#insert-image');
        const cancelBtn = container.querySelector('#cancel-image');

        const cursorPos = textarea.selectionStart;

        imageUrlInput.focus();

        const insertImage = () => {
            const url = imageUrlInput.value.trim();
            if (url) {
                const beforeText = textarea.value.substring(0, cursorPos);
                const afterText = textarea.value.substring(cursorPos);
                const imageText = `![](${url})`;
                textarea.value = beforeText + imageText + afterText;

                const newPos = cursorPos + imageText.length;
                textarea.setSelectionRange(newPos, newPos);
                textarea.focus();
            }
            document.body.removeChild(overlay);
        };

        insertBtn.onclick = insertImage;
        cancelBtn.onclick = () => document.body.removeChild(overlay);
        imageUrlInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') insertImage();
        });

        overlay.addEventListener('click', (e) => {
            if (e.target === overlay) document.body.removeChild(overlay);
        });
    }

    function insertLinkModalPlain(textarea) {
        const overlay = document.createElement('div');
        overlay.className = 'modal-overlay';
        overlay.style.zIndex = '9999999';

        const container = document.createElement('div');
        container.className = 'modal-container';
        container.style.maxWidth = '400px';
        container.innerHTML = `
            <h3>Insert Link</h3>
            <label for="link-title">Link title:</label>
            <input type="text" id="link-title" class="input-base" placeholder="Insert title here">
            <label for="link-url">Link URL:</label>
            <input type="text" id="link-url" class="input-base" placeholder="https://example.com">
            <div style="display: flex; gap: 10px; justify-content: flex-end; margin-top: 15px;">
                <button id="cancel-link" class="btn-base btn-danger">Cancel</button>
                <button id="insert-link" class="btn-base btn-primary">Insert</button>
            </div>
        `;

        overlay.appendChild(container);
        document.body.appendChild(overlay);

        const titleInput = container.querySelector('#link-title');
        const urlInput = container.querySelector('#link-url');
        const insertBtn = container.querySelector('#insert-link');
        const cancelBtn = container.querySelector('#cancel-link');

        const cursorPos = textarea.selectionStart;

        titleInput.focus();

        const insertLink = () => {
            const title = titleInput.value.trim();
            const url = urlInput.value.trim();
            if (title && url) {
                const beforeText = textarea.value.substring(0, cursorPos);
                const afterText = textarea.value.substring(cursorPos);
                const linkText = `[${title}](${url})`;
                textarea.value = beforeText + linkText + afterText;

                const newPos = cursorPos + linkText.length;
                textarea.setSelectionRange(newPos, newPos);
                textarea.focus();
            }
            document.body.removeChild(overlay);
        };

        insertBtn.onclick = insertLink;
        cancelBtn.onclick = () => document.body.removeChild(overlay);

        [titleInput, urlInput].forEach(input => {
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') insertLink();
            });
        });

        overlay.addEventListener('click', (e) => {
            if (e.target === overlay) document.body.removeChild(overlay);
        });
    }

    function formatSelectedTextPlain(textarea, format) {
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const selectedText = textarea.value.substring(start, end);

        if (!selectedText.trim()) return;

        const lines = selectedText.split('\n').map(line => line.trim()).filter(line => line);

        let formattedText;

        if (format === 'numbered') {
            formattedText = lines.map((line, index) => `${index + 1}. ${line}`).join('\n');
        } else if (format === 'bulleted') {
            formattedText = lines.map(line => `* ${line}`).join('\n');
        }

        const beforeText = textarea.value.substring(0, start);
        const afterText = textarea.value.substring(end);
        textarea.value = beforeText + formattedText + afterText;

        const newCursorPos = start + formattedText.length;
        textarea.setSelectionRange(newCursorPos, newCursorPos);
        textarea.focus();
    }

    function makeBoldPlain(textarea) {
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const selectedText = textarea.value.substring(start, end);

        if (!selectedText.trim()) return;

        const beforeText = textarea.value.substring(0, start);
        const afterText = textarea.value.substring(end);
        const boldText = `**${selectedText}**`;
        textarea.value = beforeText + boldText + afterText;

        const newCursorPos = start + boldText.length;
        textarea.setSelectionRange(newCursorPos, newCursorPos);
        textarea.focus();
    }

function convertHtmlToMarkdown(element) {
    let markdown = '';

    for (let node of element.childNodes) {
        if (node.nodeType === Node.TEXT_NODE) {

            let text = node.textContent.replace(/\s+/g, ' ');
            markdown += text;
        } else if (node.nodeType === Node.ELEMENT_NODE) {
            const tagName = node.tagName.toLowerCase();

            switch (tagName) {
                case 'img':
                    const src = node.getAttribute('src');
                    if (src) {
                        markdown += `![](${src})`;
                    }
                    break;

                case 'b':
                case 'strong':
                case 'span':

                    if (tagName === 'span') {
                        const className = node.getAttribute('class') || '';
                        const spanContent = node.textContent.trim();

                        if (className.includes('notetitle') || className.includes('title') ||
                            (spanContent.endsWith(':') && spanContent.length < 20)) {

                            if (spanContent) {

                                if (markdown && !markdown.endsWith('\n') && !markdown.endsWith(' ')) {
                                    markdown += ' ';
                                }
                                markdown += `**${spanContent}**`;

                                if (spanContent.endsWith(':')) {
                                    markdown += '\n';
                                }
                            }
                        } else {

                            markdown += convertHtmlToMarkdown(node);
                        }
                    } else {

                        const boldContent = node.textContent.trim();
                        if (boldContent) {

                            if (markdown && !markdown.endsWith('\n') && !markdown.endsWith(' ')) {
                                markdown += ' ';
                            }
                            markdown += `**${boldContent}**`;

                            if (boldContent.endsWith(':') || (boldContent.length > 10 && !boldContent.endsWith('.'))) {
                                markdown += '\n';
                            }
                        }
                    }
                    break;

                case 'i':
                case 'em':
                    markdown += `*${node.textContent}*`;
                    break;

                case 'a':
                    const href = node.getAttribute('href');
                    const linkText = node.textContent;
                    if (href && linkText) {
                        markdown += `[${linkText}](${href})`;
                    } else {
                        markdown += linkText;
                    }
                    break;

                case 'ul':
                case 'ol':

                    const listItems = node.querySelectorAll('li');
                    if (listItems.length > 0) {

                        if (markdown && !markdown.endsWith('\n')) {
                            markdown += '\n';
                        }

                        listItems.forEach((li, index) => {
                            const bullet = tagName === 'ul' ? '* ' : `${index + 1}. `;
                            const itemContent = convertHtmlToMarkdown(li).trim();
                            if (itemContent) {
                                markdown += `${bullet}${itemContent}`;

                                if (index < listItems.length - 1) {
                                    markdown += '\n';
                                }
                            }
                        });
                    }
                    break;

                case 'li':

                    markdown += convertHtmlToMarkdown(node);
                    break;

                case 'p':
                    const pContent = convertHtmlToMarkdown(node).trim();
                    if (pContent) {

                        if (markdown && !markdown.endsWith('\n')) {
                            markdown += '\n';
                        }
                        markdown += pContent;
                    }
                    break;

                case 'div':
                    const divContent = convertHtmlToMarkdown(node).trim();
                    if (divContent) {

                        if (markdown && !markdown.endsWith('\n') && !markdown.endsWith(' ')) {
                            markdown += '\n';
                        }
                        markdown += divContent;
                    }
                    break;

                case 'br':
                    markdown += '\n';
                    break;

                default:
                    markdown += convertHtmlToMarkdown(node);
                    break;
            }
        }
    }

    return markdown;
}

function createRichTextEditor(placeholder) {
    const editorContainer = document.createElement('div');
    editorContainer.className = 'rich-editor';

    Object.assign(editorContainer.style, {
        border: '1px solid #ced4da',
        borderRadius: '6px',
        backgroundColor: '#fff',
        overflow: 'hidden'
    });

    const toolbar = document.createElement('div');
    toolbar.className = 'rich-editor-toolbar';

    Object.assign(toolbar.style, {
        display: 'flex',
        alignItems: 'center',
        gap: '4px',
        padding: '8px 12px',
        backgroundColor: '#f8f9fa',
        borderBottom: '1px solid #dee2e6',
        flexWrap: 'nowrap'
    });

    const buttons = [
        { cmd: 'bold', icon: 'B', title: 'Bold' },
        { cmd: 'separator' },
        { cmd: 'numbered', icon: '1.', title: 'Numbered List' },
        { cmd: 'bulleted', icon: '•', title: 'Bullet List' },
        { cmd: 'separator' },
        { cmd: 'image', icon: 'IMG', title: 'Insert Image' },
        { cmd: 'link', icon: 'LINK', title: 'Insert Link' }
    ];

    buttons.forEach(btn => {
        if (btn.cmd === 'separator') {
            const separator = document.createElement('div');
            separator.className = 'rich-editor-separator';

            Object.assign(separator.style, {
                width: '1px',
                height: '20px',
                backgroundColor: '#dee2e6',
                margin: '0 4px'
            });

            toolbar.appendChild(separator);
            return;
        }

        const button = document.createElement('button');
        button.className = 'rich-editor-btn';
        button.innerHTML = btn.icon;
        button.title = btn.title;
        button.type = 'button';

        Object.assign(button.style, {
            padding: '6px 10px',
            border: '1px solid #ced4da',
            backgroundColor: '#fff',
            color: '#495057',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '12px',
            fontFamily: 'system-ui, -apple-system, sans-serif',
            minWidth: '32px',
            height: '32px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            transition: 'all 0.2s ease',
            userSelect: 'none'
        });

        if (btn.cmd === 'bold') {
            button.style.fontWeight = 'bold';
        }

        button.addEventListener('mouseenter', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.borderColor = '#adb5bd';
        });

        button.addEventListener('mouseleave', () => {
            button.style.backgroundColor = '#fff';
            button.style.borderColor = '#ced4da';
        });

        button.addEventListener('mousedown', () => {
            button.style.backgroundColor = '#dee2e6';
            button.style.transform = 'scale(0.95)';
        });

        button.addEventListener('mouseup', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.transform = 'scale(1)';
        });

        button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            if (btn.cmd === 'bold') {
                makeBoldPlain(content);
                return;
            }

            if (btn.cmd === 'image') {
                insertImageModalPlain(content);
                return;
            }

            if (btn.cmd === 'link') {
                insertLinkModalPlain(content);
                return;
            }

            if (btn.cmd === 'numbered' || btn.cmd === 'bulleted') {
                formatSelectedTextPlain(content, btn.cmd);
                return;
            }
        });

        toolbar.appendChild(button);
    });

    const content = document.createElement('textarea');
    content.className = 'rich-editor-content';
    content.placeholder = placeholder;

    Object.assign(content.style, {
        width: '100%',
        height: '200px',
        padding: '12px',
        border: 'none',
        outline: 'none',
        resize: 'vertical',
        fontSize: '14px',
        fontFamily: 'system-ui, -apple-system, sans-serif',
        lineHeight: '1.5',
        backgroundColor: '#fff',
        boxSizing: 'border-box'
    });

    content.addEventListener('paste', (e) => {
        e.preventDefault();

        const clipboardData = e.clipboardData || window.clipboardData;
        const htmlData = clipboardData.getData('text/html');
        const textData = clipboardData.getData('text/plain');

        let markdownContent = '';

        if (htmlData) {
            console.log('Original HTML:', htmlData);
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = htmlData;
            markdownContent = convertHtmlToMarkdown(tempDiv);
            console.log('Converted Markdown:', markdownContent);

            markdownContent = markdownContent.replace(/\n{4,}/g, '\n\n\n').trim();
            console.log('Final Markdown:', markdownContent);
        } else {
            markdownContent = textData;
        }

        const start = content.selectionStart;
        const end = content.selectionEnd;
        const beforeText = content.value.substring(0, start);
        const afterText = content.value.substring(end);

        content.value = beforeText + markdownContent + afterText;

        const newCursorPos = start + markdownContent.length;
        content.setSelectionRange(newCursorPos, newCursorPos);
    });

    content.addEventListener('focus', () => {
        editorContainer.style.borderColor = '#80bdff';
        editorContainer.style.boxShadow = '0 0 0 0.2rem rgba(0,123,255,0.25)';
    });

    content.addEventListener('blur', () => {
        editorContainer.style.borderColor = '#ced4da';
        editorContainer.style.boxShadow = 'none';
    });

    editorContainer.appendChild(toolbar);
    editorContainer.appendChild(content);

    return {
        element: editorContainer,
        getContent: () => content.value,
        getTextContent: () => content.value,
        setContent: (text) => { content.value = text; },
        isEmpty: () => !content.value.trim()
    };
}

function createRichTextEditor(placeholder) {
    const editorContainer = document.createElement('div');
    editorContainer.className = 'rich-editor';

    Object.assign(editorContainer.style, {
        border: '1px solid #ced4da',
        borderRadius: '6px',
        backgroundColor: '#fff',
        overflow: 'hidden'
    });

    const toolbar = document.createElement('div');
    toolbar.className = 'rich-editor-toolbar';

    Object.assign(toolbar.style, {
        display: 'flex',
        alignItems: 'center',
        gap: '4px',
        padding: '8px 12px',
        backgroundColor: '#f8f9fa',
        borderBottom: '1px solid #dee2e6',
        flexWrap: 'nowrap'
    });

    const buttons = [
        { cmd: 'bold', icon: 'B', title: 'Bold' },
        { cmd: 'separator' },
        { cmd: 'numbered', icon: '1.', title: 'Numbered List' },
        { cmd: 'bulleted', icon: '•', title: 'Bullet List' },
        { cmd: 'separator' },
        { cmd: 'image', icon: 'IMG', title: 'Insert Image' },
        { cmd: 'link', icon: 'LINK', title: 'Insert Link' }
    ];

    buttons.forEach(btn => {
        if (btn.cmd === 'separator') {
            const separator = document.createElement('div');
            separator.className = 'rich-editor-separator';

            Object.assign(separator.style, {
                width: '1px',
                height: '20px',
                backgroundColor: '#dee2e6',
                margin: '0 4px'
            });

            toolbar.appendChild(separator);
            return;
        }

        const button = document.createElement('button');
        button.className = 'rich-editor-btn';
        button.innerHTML = btn.icon;
        button.title = btn.title;
        button.type = 'button';

        Object.assign(button.style, {
            padding: '6px 10px',
            border: '1px solid #ced4da',
            backgroundColor: '#fff',
            color: '#495057',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '12px',
            fontFamily: 'system-ui, -apple-system, sans-serif',
            minWidth: '32px',
            height: '32px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            transition: 'all 0.2s ease',
            userSelect: 'none'
        });

        if (btn.cmd === 'bold') {
            button.style.fontWeight = 'bold';
        }

        button.addEventListener('mouseenter', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.borderColor = '#adb5bd';
        });

        button.addEventListener('mouseleave', () => {
            button.style.backgroundColor = '#fff';
            button.style.borderColor = '#ced4da';
        });

        button.addEventListener('mousedown', () => {
            button.style.backgroundColor = '#dee2e6';
            button.style.transform = 'scale(0.95)';
        });

        button.addEventListener('mouseup', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.transform = 'scale(1)';
        });

        button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            if (btn.cmd === 'bold') {
                makeBoldPlain(content);
                return;
            }

            if (btn.cmd === 'image') {
                insertImageModalPlain(content);
                return;
            }

            if (btn.cmd === 'link') {
                insertLinkModalPlain(content);
                return;
            }

            if (btn.cmd === 'numbered' || btn.cmd === 'bulleted') {
                formatSelectedTextPlain(content, btn.cmd);
                return;
            }
        });

        toolbar.appendChild(button);
    });

    const content = document.createElement('textarea');
    content.className = 'rich-editor-content';
    content.placeholder = placeholder;

    Object.assign(content.style, {
        width: '100%',
        height: '200px',
        padding: '12px',
        border: 'none',
        outline: 'none',
        resize: 'vertical',
        fontSize: '14px',
        fontFamily: 'system-ui, -apple-system, sans-serif',
        lineHeight: '1.5',
        backgroundColor: '#fff',
        boxSizing: 'border-box'
    });

    content.addEventListener('paste', (e) => {
        e.preventDefault();

        const clipboardData = e.clipboardData || window.clipboardData;
        const htmlData = clipboardData.getData('text/html');
        const textData = clipboardData.getData('text/plain');

        let markdownContent = '';

        if (htmlData) {
            console.log('Original HTML:', htmlData);
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = htmlData;
            markdownContent = convertHtmlToMarkdown(tempDiv);
            console.log('Converted Markdown:', markdownContent);

            markdownContent = markdownContent.replace(/\n{4,}/g, '\n\n\n').trim();
            console.log('Final Markdown:', markdownContent);
        } else {
            markdownContent = textData;
        }

        const start = content.selectionStart;
        const end = content.selectionEnd;
        const beforeText = content.value.substring(0, start);
        const afterText = content.value.substring(end);

        content.value = beforeText + markdownContent + afterText;

        const newCursorPos = start + markdownContent.length;
        content.setSelectionRange(newCursorPos, newCursorPos);
    });

    content.addEventListener('focus', () => {
        editorContainer.style.borderColor = '#80bdff';
        editorContainer.style.boxShadow = '0 0 0 0.2rem rgba(0,123,255,0.25)';
    });

    content.addEventListener('blur', () => {
        editorContainer.style.borderColor = '#ced4da';
        editorContainer.style.boxShadow = 'none';
    });

    editorContainer.appendChild(toolbar);
    editorContainer.appendChild(content);

    return {
        element: editorContainer,
        getContent: () => content.value,
        getTextContent: () => content.value,
        setContent: (text) => { content.value = text; },
        isEmpty: () => !content.value.trim()
    };
}

function createRichTextEditor(placeholder) {
    const editorContainer = document.createElement('div');
    editorContainer.className = 'rich-editor';

    Object.assign(editorContainer.style, {
        border: '1px solid #ced4da',
        borderRadius: '6px',
        backgroundColor: '#fff',
        overflow: 'hidden'
    });

    const toolbar = document.createElement('div');
    toolbar.className = 'rich-editor-toolbar';

    Object.assign(toolbar.style, {
        display: 'flex',
        alignItems: 'center',
        gap: '4px',
        padding: '8px 12px',
        backgroundColor: '#f8f9fa',
        borderBottom: '1px solid #dee2e6',
        flexWrap: 'nowrap'
    });

    const buttons = [
        { cmd: 'bold', icon: 'B', title: 'Bold' },
        { cmd: 'separator' },
        { cmd: 'numbered', icon: '1.', title: 'Numbered List' },
        { cmd: 'bulleted', icon: '•', title: 'Bullet List' },
        { cmd: 'separator' },
        { cmd: 'image', icon: 'IMG', title: 'Insert Image' },
        { cmd: 'link', icon: 'LINK', title: 'Insert Link' }
    ];

    buttons.forEach(btn => {
        if (btn.cmd === 'separator') {
            const separator = document.createElement('div');
            separator.className = 'rich-editor-separator';

            Object.assign(separator.style, {
                width: '1px',
                height: '20px',
                backgroundColor: '#dee2e6',
                margin: '0 4px'
            });

            toolbar.appendChild(separator);
            return;
        }

        const button = document.createElement('button');
        button.className = 'rich-editor-btn';
        button.innerHTML = btn.icon;
        button.title = btn.title;
        button.type = 'button';

        Object.assign(button.style, {
            padding: '6px 10px',
            border: '1px solid #ced4da',
            backgroundColor: '#fff',
            color: '#495057',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '12px',
            fontFamily: 'system-ui, -apple-system, sans-serif',
            minWidth: '32px',
            height: '32px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            transition: 'all 0.2s ease',
            userSelect: 'none'
        });

        if (btn.cmd === 'bold') {
            button.style.fontWeight = 'bold';
        }

        button.addEventListener('mouseenter', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.borderColor = '#adb5bd';
        });

        button.addEventListener('mouseleave', () => {
            button.style.backgroundColor = '#fff';
            button.style.borderColor = '#ced4da';
        });

        button.addEventListener('mousedown', () => {
            button.style.backgroundColor = '#dee2e6';
            button.style.transform = 'scale(0.95)';
        });

        button.addEventListener('mouseup', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.transform = 'scale(1)';
        });

        button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            if (btn.cmd === 'bold') {
                makeBoldPlain(content);
                return;
            }

            if (btn.cmd === 'image') {
                insertImageModalPlain(content);
                return;
            }

            if (btn.cmd === 'link') {
                insertLinkModalPlain(content);
                return;
            }

            if (btn.cmd === 'numbered' || btn.cmd === 'bulleted') {
                formatSelectedTextPlain(content, btn.cmd);
                return;
            }
        });

        toolbar.appendChild(button);
    });

    const content = document.createElement('textarea');
    content.className = 'rich-editor-content';
    content.placeholder = placeholder;

    Object.assign(content.style, {
        width: '100%',
        height: '200px',
        padding: '12px',
        border: 'none',
        outline: 'none',
        resize: 'vertical',
        fontSize: '14px',
        fontFamily: 'system-ui, -apple-system, sans-serif',
        lineHeight: '1.5',
        backgroundColor: '#fff',
        boxSizing: 'border-box'
    });

    content.addEventListener('paste', (e) => {
        e.preventDefault();

        const clipboardData = e.clipboardData || window.clipboardData;
        const htmlData = clipboardData.getData('text/html');
        const textData = clipboardData.getData('text/plain');

        let markdownContent = '';

        if (htmlData) {
            console.log('Original HTML:', htmlData);
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = htmlData;
            markdownContent = convertHtmlToMarkdown(tempDiv);
            console.log('Converted Markdown:', markdownContent);

            markdownContent = markdownContent.replace(/\n{4,}/g, '\n\n\n').trim();
            console.log('Final Markdown:', markdownContent);
        } else {
            markdownContent = textData;
        }

        const start = content.selectionStart;
        const end = content.selectionEnd;
        const beforeText = content.value.substring(0, start);
        const afterText = content.value.substring(end);

        content.value = beforeText + markdownContent + afterText;

        const newCursorPos = start + markdownContent.length;
        content.setSelectionRange(newCursorPos, newCursorPos);
    });

    content.addEventListener('focus', () => {
        editorContainer.style.borderColor = '#80bdff';
        editorContainer.style.boxShadow = '0 0 0 0.2rem rgba(0,123,255,0.25)';
    });

    content.addEventListener('blur', () => {
        editorContainer.style.borderColor = '#ced4da';
        editorContainer.style.boxShadow = 'none';
    });

    editorContainer.appendChild(toolbar);
    editorContainer.appendChild(content);

    return {
        element: editorContainer,
        getContent: () => content.value,
        getTextContent: () => content.value,
        setContent: (text) => { content.value = text; },
        isEmpty: () => !content.value.trim()
    };
}

function createRichTextEditor(placeholder) {
    const editorContainer = document.createElement('div');
    editorContainer.className = 'rich-editor';

    Object.assign(editorContainer.style, {
        border: '1px solid #ced4da',
        borderRadius: '6px',
        backgroundColor: '#fff',
        overflow: 'hidden'
    });

    const toolbar = document.createElement('div');
    toolbar.className = 'rich-editor-toolbar';

    Object.assign(toolbar.style, {
        display: 'flex',
        alignItems: 'center',
        gap: '4px',
        padding: '8px 12px',
        backgroundColor: '#f8f9fa',
        borderBottom: '1px solid #dee2e6',
        flexWrap: 'nowrap'
    });

    const buttons = [
        { cmd: 'bold', icon: 'B', title: 'Bold' },
        { cmd: 'separator' },
        { cmd: 'numbered', icon: '1.', title: 'Numbered List' },
        { cmd: 'bulleted', icon: '•', title: 'Bullet List' },
        { cmd: 'separator' },
        { cmd: 'image', icon: 'IMG', title: 'Insert Image' },
        { cmd: 'link', icon: 'LINK', title: 'Insert Link' }
    ];

    buttons.forEach(btn => {
        if (btn.cmd === 'separator') {
            const separator = document.createElement('div');
            separator.className = 'rich-editor-separator';

            Object.assign(separator.style, {
                width: '1px',
                height: '20px',
                backgroundColor: '#dee2e6',
                margin: '0 4px'
            });

            toolbar.appendChild(separator);
            return;
        }

        const button = document.createElement('button');
        button.className = 'rich-editor-btn';
        button.innerHTML = btn.icon;
        button.title = btn.title;
        button.type = 'button';

        Object.assign(button.style, {
            padding: '6px 10px',
            border: '1px solid #ced4da',
            backgroundColor: '#fff',
            color: '#495057',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '12px',
            fontFamily: 'system-ui, -apple-system, sans-serif',
            minWidth: '32px',
            height: '32px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            transition: 'all 0.2s ease',
            userSelect: 'none'
        });

        if (btn.cmd === 'bold') {
            button.style.fontWeight = 'bold';
        }

        button.addEventListener('mouseenter', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.borderColor = '#adb5bd';
        });

        button.addEventListener('mouseleave', () => {
            button.style.backgroundColor = '#fff';
            button.style.borderColor = '#ced4da';
        });

        button.addEventListener('mousedown', () => {
            button.style.backgroundColor = '#dee2e6';
            button.style.transform = 'scale(0.95)';
        });

        button.addEventListener('mouseup', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.transform = 'scale(1)';
        });

        button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            if (btn.cmd === 'bold') {
                makeBoldPlain(content);
                return;
            }

            if (btn.cmd === 'image') {
                insertImageModalPlain(content);
                return;
            }

            if (btn.cmd === 'link') {
                insertLinkModalPlain(content);
                return;
            }

            if (btn.cmd === 'numbered' || btn.cmd === 'bulleted') {
                formatSelectedTextPlain(content, btn.cmd);
                return;
            }
        });

        toolbar.appendChild(button);
    });

    const content = document.createElement('textarea');
    content.className = 'rich-editor-content';
    content.placeholder = placeholder;

    Object.assign(content.style, {
        width: '100%',
        height: '200px',
        padding: '12px',
        border: 'none',
        outline: 'none',
        resize: 'vertical',
        fontSize: '14px',
        fontFamily: 'system-ui, -apple-system, sans-serif',
        lineHeight: '1.5',
        backgroundColor: '#fff',
        boxSizing: 'border-box'
    });

    content.addEventListener('paste', (e) => {
        e.preventDefault();

        const clipboardData = e.clipboardData || window.clipboardData;
        const htmlData = clipboardData.getData('text/html');
        const textData = clipboardData.getData('text/plain');

        let markdownContent = '';

        if (htmlData) {
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = htmlData;
            markdownContent = convertHtmlToMarkdown(tempDiv);

            markdownContent = markdownContent.replace(/\n{4,}/g, '\n\n\n').trim();
        } else {
            markdownContent = textData;
        }

        const start = content.selectionStart;
        const end = content.selectionEnd;
        const beforeText = content.value.substring(0, start);
        const afterText = content.value.substring(end);

        content.value = beforeText + markdownContent + afterText;

        const newCursorPos = start + markdownContent.length;
        content.setSelectionRange(newCursorPos, newCursorPos);
    });

    content.addEventListener('focus', () => {
        editorContainer.style.borderColor = '#80bdff';
        editorContainer.style.boxShadow = '0 0 0 0.2rem rgba(0,123,255,0.25)';
    });

    content.addEventListener('blur', () => {
        editorContainer.style.borderColor = '#ced4da';
        editorContainer.style.boxShadow = 'none';
    });

    editorContainer.appendChild(toolbar);
    editorContainer.appendChild(content);

    return {
        element: editorContainer,
        getContent: () => content.value,
        getTextContent: () => content.value,
        setContent: (text) => { content.value = text; },
        isEmpty: () => !content.value.trim()
    };
}

function createRichTextEditor(placeholder) {
    const editorContainer = document.createElement('div');
    editorContainer.className = 'rich-editor';

    Object.assign(editorContainer.style, {
        border: '1px solid #ced4da',
        borderRadius: '6px',
        backgroundColor: '#fff',
        overflow: 'hidden'
    });

    const toolbar = document.createElement('div');
    toolbar.className = 'rich-editor-toolbar';

    Object.assign(toolbar.style, {
        display: 'flex',
        alignItems: 'center',
        gap: '4px',
        padding: '8px 12px',
        backgroundColor: '#f8f9fa',
        borderBottom: '1px solid #dee2e6',
        flexWrap: 'nowrap'
    });

    const buttons = [
        { cmd: 'bold', icon: 'B', title: 'Bold' },
        { cmd: 'separator' },
        { cmd: 'numbered', icon: '1.', title: 'Numbered List' },
        { cmd: 'bulleted', icon: '•', title: 'Bullet List' },
        { cmd: 'separator' },
        { cmd: 'image', icon: 'IMG', title: 'Insert Image' },
        { cmd: 'link', icon: 'LINK', title: 'Insert Link' }
    ];

    buttons.forEach(btn => {
        if (btn.cmd === 'separator') {
            const separator = document.createElement('div');
            separator.className = 'rich-editor-separator';

            Object.assign(separator.style, {
                width: '1px',
                height: '20px',
                backgroundColor: '#dee2e6',
                margin: '0 4px'
            });

            toolbar.appendChild(separator);
            return;
        }

        const button = document.createElement('button');
        button.className = 'rich-editor-btn';
        button.innerHTML = btn.icon;
        button.title = btn.title;
        button.type = 'button';

        Object.assign(button.style, {
            padding: '6px 10px',
            border: '1px solid #ced4da',
            backgroundColor: '#fff',
            color: '#495057',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '12px',
            fontFamily: 'system-ui, -apple-system, sans-serif',
            minWidth: '32px',
            height: '32px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            transition: 'all 0.2s ease',
            userSelect: 'none'
        });

        if (btn.cmd === 'bold') {
            button.style.fontWeight = 'bold';
        }

        button.addEventListener('mouseenter', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.borderColor = '#adb5bd';
        });

        button.addEventListener('mouseleave', () => {
            button.style.backgroundColor = '#fff';
            button.style.borderColor = '#ced4da';
        });

        button.addEventListener('mousedown', () => {
            button.style.backgroundColor = '#dee2e6';
            button.style.transform = 'scale(0.95)';
        });

        button.addEventListener('mouseup', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.transform = 'scale(1)';
        });

        button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            if (btn.cmd === 'bold') {
                makeBoldPlain(content);
                return;
            }

            if (btn.cmd === 'image') {
                insertImageModalPlain(content);
                return;
            }

            if (btn.cmd === 'link') {
                insertLinkModalPlain(content);
                return;
            }

            if (btn.cmd === 'numbered' || btn.cmd === 'bulleted') {
                formatSelectedTextPlain(content, btn.cmd);
                return;
            }
        });

        toolbar.appendChild(button);
    });

    const content = document.createElement('textarea');
    content.className = 'rich-editor-content';
    content.placeholder = placeholder;

    Object.assign(content.style, {
        width: '100%',
        height: '200px',
        padding: '12px',
        border: 'none',
        outline: 'none',
        resize: 'vertical',
        fontSize: '14px',
        fontFamily: 'system-ui, -apple-system, sans-serif',
        lineHeight: '1.5',
        backgroundColor: '#fff',
        boxSizing: 'border-box'
    });

    content.addEventListener('paste', (e) => {
        e.preventDefault();

        const clipboardData = e.clipboardData || window.clipboardData;
        const htmlData = clipboardData.getData('text/html');
        const textData = clipboardData.getData('text/plain');

        let markdownContent = '';

        if (htmlData) {
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = htmlData;
            markdownContent = convertHtmlToMarkdown(tempDiv);

            markdownContent = markdownContent.replace(/\n{4,}/g, '\n\n\n').trim();
        } else {
            markdownContent = textData;
        }

        const start = content.selectionStart;
        const end = content.selectionEnd;
        const beforeText = content.value.substring(0, start);
        const afterText = content.value.substring(end);

        content.value = beforeText + markdownContent + afterText;

        const newCursorPos = start + markdownContent.length;
        content.setSelectionRange(newCursorPos, newCursorPos);
    });

    content.addEventListener('focus', () => {
        editorContainer.style.borderColor = '#80bdff';
        editorContainer.style.boxShadow = '0 0 0 0.2rem rgba(0,123,255,0.25)';
    });

    content.addEventListener('blur', () => {
        editorContainer.style.borderColor = '#ced4da';
        editorContainer.style.boxShadow = 'none';
    });

    editorContainer.appendChild(toolbar);
    editorContainer.appendChild(content);

    return {
        element: editorContainer,
        getContent: () => content.value,
        getTextContent: () => content.value,
        setContent: (text) => { content.value = text; },
        isEmpty: () => !content.value.trim()
    };
}

function createRichTextEditor(placeholder) {
    const editorContainer = document.createElement('div');
    editorContainer.className = 'rich-editor';

    Object.assign(editorContainer.style, {
        border: '1px solid #ced4da',
        borderRadius: '6px',
        backgroundColor: '#fff',
        overflow: 'hidden'
    });

    const toolbar = document.createElement('div');
    toolbar.className = 'rich-editor-toolbar';

    Object.assign(toolbar.style, {
        display: 'flex',
        alignItems: 'center',
        gap: '4px',
        padding: '8px 12px',
        backgroundColor: '#f8f9fa',
        borderBottom: '1px solid #dee2e6',
        flexWrap: 'nowrap'
    });

    const buttons = [
        { cmd: 'bold', icon: 'B', title: 'Bold' },
        { cmd: 'separator' },
        { cmd: 'numbered', icon: '1.', title: 'Numbered List' },
        { cmd: 'bulleted', icon: '•', title: 'Bullet List' },
        { cmd: 'separator' },
        { cmd: 'image', icon: 'IMG', title: 'Insert Image' },
        { cmd: 'link', icon: 'LINK', title: 'Insert Link' }
    ];

    buttons.forEach(btn => {
        if (btn.cmd === 'separator') {
            const separator = document.createElement('div');
            separator.className = 'rich-editor-separator';

            Object.assign(separator.style, {
                width: '1px',
                height: '20px',
                backgroundColor: '#dee2e6',
                margin: '0 4px'
            });

            toolbar.appendChild(separator);
            return;
        }

        const button = document.createElement('button');
        button.className = 'rich-editor-btn';
        button.innerHTML = btn.icon;
        button.title = btn.title;
        button.type = 'button';

        Object.assign(button.style, {
            padding: '6px 10px',
            border: '1px solid #ced4da',
            backgroundColor: '#fff',
            color: '#495057',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '12px',
            fontFamily: 'system-ui, -apple-system, sans-serif',
            minWidth: '32px',
            height: '32px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            transition: 'all 0.2s ease',
            userSelect: 'none'
        });

        if (btn.cmd === 'bold') {
            button.style.fontWeight = 'bold';
        }

        button.addEventListener('mouseenter', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.borderColor = '#adb5bd';
        });

        button.addEventListener('mouseleave', () => {
            button.style.backgroundColor = '#fff';
            button.style.borderColor = '#ced4da';
        });

        button.addEventListener('mousedown', () => {
            button.style.backgroundColor = '#dee2e6';
            button.style.transform = 'scale(0.95)';
        });

        button.addEventListener('mouseup', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.transform = 'scale(1)';
        });

        button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            if (btn.cmd === 'bold') {
                makeBoldPlain(content);
                return;
            }

            if (btn.cmd === 'image') {
                insertImageModalPlain(content);
                return;
            }

            if (btn.cmd === 'link') {
                insertLinkModalPlain(content);
                return;
            }

            if (btn.cmd === 'numbered' || btn.cmd === 'bulleted') {
                formatSelectedTextPlain(content, btn.cmd);
                return;
            }
        });

        toolbar.appendChild(button);
    });

    const content = document.createElement('textarea');
    content.className = 'rich-editor-content';
    content.placeholder = placeholder;

    Object.assign(content.style, {
        width: '100%',
        height: '200px',
        padding: '12px',
        border: 'none',
        outline: 'none',
        resize: 'vertical',
        fontSize: '14px',
        fontFamily: 'system-ui, -apple-system, sans-serif',
        lineHeight: '1.5',
        backgroundColor: '#fff',
        boxSizing: 'border-box'
    });

    content.addEventListener('paste', (e) => {
        e.preventDefault();

        const clipboardData = e.clipboardData || window.clipboardData;
        const htmlData = clipboardData.getData('text/html');
        const textData = clipboardData.getData('text/plain');

        let markdownContent = '';

        if (htmlData) {
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = htmlData;
            markdownContent = convertHtmlToMarkdown(tempDiv);

            markdownContent = markdownContent.replace(/\n{4,}/g, '\n\n\n').trim();
        } else {
            markdownContent = textData;
        }

        const start = content.selectionStart;
        const end = content.selectionEnd;
        const beforeText = content.value.substring(0, start);
        const afterText = content.value.substring(end);

        content.value = beforeText + markdownContent + afterText;

        const newCursorPos = start + markdownContent.length;
        content.setSelectionRange(newCursorPos, newCursorPos);
    });

    content.addEventListener('focus', () => {
        editorContainer.style.borderColor = '#80bdff';
        editorContainer.style.boxShadow = '0 0 0 0.2rem rgba(0,123,255,0.25)';
    });

    content.addEventListener('blur', () => {
        editorContainer.style.borderColor = '#ced4da';
        editorContainer.style.boxShadow = 'none';
    });

    editorContainer.appendChild(toolbar);
    editorContainer.appendChild(content);

    return {
        element: editorContainer,
        getContent: () => content.value,
        getTextContent: () => content.value,
        setContent: (text) => { content.value = text; },
        isEmpty: () => !content.value.trim()
    };
}

function createRichTextEditor(placeholder) {
    const editorContainer = document.createElement('div');
    editorContainer.className = 'rich-editor';

    Object.assign(editorContainer.style, {
        border: '1px solid #ced4da',
        borderRadius: '6px',
        backgroundColor: '#fff',
        overflow: 'hidden'
    });

    const toolbar = document.createElement('div');
    toolbar.className = 'rich-editor-toolbar';

    Object.assign(toolbar.style, {
        display: 'flex',
        alignItems: 'center',
        gap: '4px',
        padding: '8px 12px',
        backgroundColor: '#f8f9fa',
        borderBottom: '1px solid #dee2e6',
        flexWrap: 'nowrap'
    });

    const buttons = [
        { cmd: 'bold', icon: 'B', title: 'Bold' },
        { cmd: 'separator' },
        { cmd: 'numbered', icon: '1.', title: 'Numbered List' },
        { cmd: 'bulleted', icon: '•', title: 'Bullet List' },
        { cmd: 'separator' },
        { cmd: 'image', icon: 'IMG', title: 'Insert Image' },
        { cmd: 'link', icon: 'LINK', title: 'Insert Link' }
    ];

    buttons.forEach(btn => {
        if (btn.cmd === 'separator') {
            const separator = document.createElement('div');
            separator.className = 'rich-editor-separator';

            Object.assign(separator.style, {
                width: '1px',
                height: '20px',
                backgroundColor: '#dee2e6',
                margin: '0 4px'
            });

            toolbar.appendChild(separator);
            return;
        }

        const button = document.createElement('button');
        button.className = 'rich-editor-btn';
        button.innerHTML = btn.icon;
        button.title = btn.title;
        button.type = 'button';

        Object.assign(button.style, {
            padding: '6px 10px',
            border: '1px solid #ced4da',
            backgroundColor: '#fff',
            color: '#495057',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '12px',
            fontFamily: 'system-ui, -apple-system, sans-serif',
            minWidth: '32px',
            height: '32px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            transition: 'all 0.2s ease',
            userSelect: 'none'
        });

        if (btn.cmd === 'bold') {
            button.style.fontWeight = 'bold';
        }

        button.addEventListener('mouseenter', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.borderColor = '#adb5bd';
        });

        button.addEventListener('mouseleave', () => {
            button.style.backgroundColor = '#fff';
            button.style.borderColor = '#ced4da';
        });

        button.addEventListener('mousedown', () => {
            button.style.backgroundColor = '#dee2e6';
            button.style.transform = 'scale(0.95)';
        });

        button.addEventListener('mouseup', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.transform = 'scale(1)';
        });

        button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            if (btn.cmd === 'bold') {
                makeBoldPlain(content);
                return;
            }

            if (btn.cmd === 'image') {
                insertImageModalPlain(content);
                return;
            }

            if (btn.cmd === 'link') {
                insertLinkModalPlain(content);
                return;
            }

            if (btn.cmd === 'numbered' || btn.cmd === 'bulleted') {
                formatSelectedTextPlain(content, btn.cmd);
                return;
            }
        });

        toolbar.appendChild(button);
    });

    const content = document.createElement('textarea');
    content.className = 'rich-editor-content';
    content.placeholder = placeholder;

    Object.assign(content.style, {
        width: '100%',
        height: '200px',
        padding: '12px',
        border: 'none',
        outline: 'none',
        resize: 'vertical',
        fontSize: '14px',
        fontFamily: 'system-ui, -apple-system, sans-serif',
        lineHeight: '1.5',
        backgroundColor: '#fff',
        boxSizing: 'border-box'
    });

    content.addEventListener('paste', (e) => {
        e.preventDefault();

        const clipboardData = e.clipboardData || window.clipboardData;
        const htmlData = clipboardData.getData('text/html');
        const textData = clipboardData.getData('text/plain');

        let markdownContent = '';

        if (htmlData) {
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = htmlData;
            markdownContent = convertHtmlToMarkdown(tempDiv);

            markdownContent = markdownContent.replace(/\n{3,}/g, '\n\n').trim();
        } else {
            markdownContent = textData;
        }

        const start = content.selectionStart;
        const end = content.selectionEnd;
        const beforeText = content.value.substring(0, start);
        const afterText = content.value.substring(end);

        content.value = beforeText + markdownContent + afterText;

        const newCursorPos = start + markdownContent.length;
        content.setSelectionRange(newCursorPos, newCursorPos);
    });

    content.addEventListener('focus', () => {
        editorContainer.style.borderColor = '#80bdff';
        editorContainer.style.boxShadow = '0 0 0 0.2rem rgba(0,123,255,0.25)';
    });

    content.addEventListener('blur', () => {
        editorContainer.style.borderColor = '#ced4da';
        editorContainer.style.boxShadow = 'none';
    });

    editorContainer.appendChild(toolbar);
    editorContainer.appendChild(content);

    return {
        element: editorContainer,
        getContent: () => content.value,
        getTextContent: () => content.value,
        setContent: (text) => { content.value = text; },
        isEmpty: () => !content.value.trim()
    };
}

function createRichTextEditor(placeholder) {
    const editorContainer = document.createElement('div');
    editorContainer.className = 'rich-editor';

    Object.assign(editorContainer.style, {
        border: '1px solid #ced4da',
        borderRadius: '6px',
        backgroundColor: '#fff',
        overflow: 'hidden'
    });

    const toolbar = document.createElement('div');
    toolbar.className = 'rich-editor-toolbar';

    Object.assign(toolbar.style, {
        display: 'flex',
        alignItems: 'center',
        gap: '4px',
        padding: '8px 12px',
        backgroundColor: '#f8f9fa',
        borderBottom: '1px solid #dee2e6',
        flexWrap: 'nowrap'
    });

    const buttons = [
        { cmd: 'bold', icon: 'B', title: 'Bold' },
        { cmd: 'separator' },
        { cmd: 'numbered', icon: '1.', title: 'Numbered List' },
        { cmd: 'bulleted', icon: '•', title: 'Bullet List' },
        { cmd: 'separator' },
        { cmd: 'image', icon: 'IMG', title: 'Insert Image' },
        { cmd: 'link', icon: 'LINK', title: 'Insert Link' }
    ];

    buttons.forEach(btn => {
        if (btn.cmd === 'separator') {
            const separator = document.createElement('div');
            separator.className = 'rich-editor-separator';

            Object.assign(separator.style, {
                width: '1px',
                height: '20px',
                backgroundColor: '#dee2e6',
                margin: '0 4px'
            });

            toolbar.appendChild(separator);
            return;
        }

        const button = document.createElement('button');
        button.className = 'rich-editor-btn';
        button.innerHTML = btn.icon;
        button.title = btn.title;
        button.type = 'button';

        Object.assign(button.style, {
            padding: '6px 10px',
            border: '1px solid #ced4da',
            backgroundColor: '#fff',
            color: '#495057',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '12px',
            fontFamily: 'system-ui, -apple-system, sans-serif',
            minWidth: '32px',
            height: '32px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            transition: 'all 0.2s ease',
            userSelect: 'none'
        });

        if (btn.cmd === 'bold') {
            button.style.fontWeight = 'bold';
        }

        button.addEventListener('mouseenter', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.borderColor = '#adb5bd';
        });

        button.addEventListener('mouseleave', () => {
            button.style.backgroundColor = '#fff';
            button.style.borderColor = '#ced4da';
        });

        button.addEventListener('mousedown', () => {
            button.style.backgroundColor = '#dee2e6';
            button.style.transform = 'scale(0.95)';
        });

        button.addEventListener('mouseup', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.transform = 'scale(1)';
        });

        button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            if (btn.cmd === 'bold') {
                makeBoldPlain(content);
                return;
            }

            if (btn.cmd === 'image') {
                insertImageModalPlain(content);
                return;
            }

            if (btn.cmd === 'link') {
                insertLinkModalPlain(content);
                return;
            }

            if (btn.cmd === 'numbered' || btn.cmd === 'bulleted') {
                formatSelectedTextPlain(content, btn.cmd);
                return;
            }
        });

        toolbar.appendChild(button);
    });

    const content = document.createElement('textarea');
    content.className = 'rich-editor-content';
    content.placeholder = placeholder;

    Object.assign(content.style, {
        width: '100%',
        height: '200px',
        padding: '12px',
        border: 'none',
        outline: 'none',
        resize: 'vertical',
        fontSize: '14px',
        fontFamily: 'system-ui, -apple-system, sans-serif',
        lineHeight: '1.5',
        backgroundColor: '#fff',
        boxSizing: 'border-box'
    });

    content.addEventListener('paste', (e) => {
        e.preventDefault();

        const clipboardData = e.clipboardData || window.clipboardData;
        const htmlData = clipboardData.getData('text/html');
        const textData = clipboardData.getData('text/plain');

        let markdownContent = '';

        if (htmlData) {
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = htmlData;
            markdownContent = convertHtmlToMarkdown(tempDiv);

            markdownContent = markdownContent.replace(/\n{3,}/g, '\n\n').trim();
        } else {
            markdownContent = textData;
        }

        const start = content.selectionStart;
        const end = content.selectionEnd;
        const beforeText = content.value.substring(0, start);
        const afterText = content.value.substring(end);

        content.value = beforeText + markdownContent + afterText;

        const newCursorPos = start + markdownContent.length;
        content.setSelectionRange(newCursorPos, newCursorPos);
    });

    content.addEventListener('focus', () => {
        editorContainer.style.borderColor = '#80bdff';
        editorContainer.style.boxShadow = '0 0 0 0.2rem rgba(0,123,255,0.25)';
    });

    content.addEventListener('blur', () => {
        editorContainer.style.borderColor = '#ced4da';
        editorContainer.style.boxShadow = 'none';
    });

    editorContainer.appendChild(toolbar);
    editorContainer.appendChild(content);

    return {
        element: editorContainer,
        getContent: () => content.value,
        getTextContent: () => content.value,
        setContent: (text) => { content.value = text; },
        isEmpty: () => !content.value.trim()
    };
}

function createRichTextEditor(placeholder) {
    const editorContainer = document.createElement('div');
    editorContainer.className = 'rich-editor';

    Object.assign(editorContainer.style, {
        border: '1px solid #ced4da',
        borderRadius: '6px',
        backgroundColor: '#fff',
        overflow: 'hidden'
    });

    const toolbar = document.createElement('div');
    toolbar.className = 'rich-editor-toolbar';

    Object.assign(toolbar.style, {
        display: 'flex',
        alignItems: 'center',
        gap: '4px',
        padding: '8px 12px',
        backgroundColor: '#f8f9fa',
        borderBottom: '1px solid #dee2e6',
        flexWrap: 'nowrap'
    });

    const buttons = [
        { cmd: 'bold', icon: 'B', title: 'Bold' },
        { cmd: 'separator' },
        { cmd: 'numbered', icon: '1.', title: 'Numbered List' },
        { cmd: 'bulleted', icon: '•', title: 'Bullet List' },
        { cmd: 'separator' },
        { cmd: 'image', icon: 'IMG', title: 'Insert Image' },
        { cmd: 'link', icon: 'LINK', title: 'Insert Link' }
    ];

    buttons.forEach(btn => {
        if (btn.cmd === 'separator') {
            const separator = document.createElement('div');
            separator.className = 'rich-editor-separator';

            Object.assign(separator.style, {
                width: '1px',
                height: '20px',
                backgroundColor: '#dee2e6',
                margin: '0 4px'
            });

            toolbar.appendChild(separator);
            return;
        }

        const button = document.createElement('button');
        button.className = 'rich-editor-btn';
        button.innerHTML = btn.icon;
        button.title = btn.title;
        button.type = 'button';

        Object.assign(button.style, {
            padding: '6px 10px',
            border: '1px solid #ced4da',
            backgroundColor: '#fff',
            color: '#495057',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '12px',
            fontFamily: 'system-ui, -apple-system, sans-serif',
            minWidth: '32px',
            height: '32px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            transition: 'all 0.2s ease',
            userSelect: 'none'
        });

        if (btn.cmd === 'bold') {
            button.style.fontWeight = 'bold';
        }

        button.addEventListener('mouseenter', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.borderColor = '#adb5bd';
        });

        button.addEventListener('mouseleave', () => {
            button.style.backgroundColor = '#fff';
            button.style.borderColor = '#ced4da';
        });

        button.addEventListener('mousedown', () => {
            button.style.backgroundColor = '#dee2e6';
            button.style.transform = 'scale(0.95)';
        });

        button.addEventListener('mouseup', () => {
            button.style.backgroundColor = '#e9ecef';
            button.style.transform = 'scale(1)';
        });

        button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            if (btn.cmd === 'bold') {
                makeBoldPlain(content);
                return;
            }

            if (btn.cmd === 'image') {
                insertImageModalPlain(content);
                return;
            }

            if (btn.cmd === 'link') {
                insertLinkModalPlain(content);
                return;
            }

            if (btn.cmd === 'numbered' || btn.cmd === 'bulleted') {
                formatSelectedTextPlain(content, btn.cmd);
                return;
            }
        });

        toolbar.appendChild(button);
    });

    const content = document.createElement('textarea');
    content.className = 'rich-editor-content';
    content.placeholder = placeholder;

    Object.assign(content.style, {
        width: '100%',
        height: '200px',
        padding: '12px',
        border: 'none',
        outline: 'none',
        resize: 'vertical',
        fontSize: '14px',
        fontFamily: 'system-ui, -apple-system, sans-serif',
        lineHeight: '1.5',
        backgroundColor: '#fff',
        boxSizing: 'border-box'
    });

    content.addEventListener('paste', (e) => {
        e.preventDefault();

        const clipboardData = e.clipboardData || window.clipboardData;
        const htmlData = clipboardData.getData('text/html');
        const textData = clipboardData.getData('text/plain');

        let markdownContent = '';

        if (htmlData) {

            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = htmlData;

            markdownContent = convertHtmlToMarkdown(tempDiv);
        } else {

            markdownContent = textData;
        }

        const start = content.selectionStart;
        const end = content.selectionEnd;
        const beforeText = content.value.substring(0, start);
        const afterText = content.value.substring(end);

        content.value = beforeText + markdownContent + afterText;

        const newCursorPos = start + markdownContent.length;
        content.setSelectionRange(newCursorPos, newCursorPos);
    });

    content.addEventListener('focus', () => {
        editorContainer.style.borderColor = '#80bdff';
        editorContainer.style.boxShadow = '0 0 0 0.2rem rgba(0,123,255,0.25)';
    });

    content.addEventListener('blur', () => {
        editorContainer.style.borderColor = '#ced4da';
        editorContainer.style.boxShadow = 'none';
    });

    editorContainer.appendChild(toolbar);
    editorContainer.appendChild(content);

    return {
        element: editorContainer,
        getContent: () => content.value,
        getTextContent: () => content.value,
        setContent: (text) => { content.value = text; },
        isEmpty: () => !content.value.trim()
    };
}

    function checkForMissingData(dataArray) {
        const warnings = [];

        dataArray.forEach((item, index) => {
            const langName = AVAILABLE_LANGS.find(lang => lang.code === item.lc)?.name || item.lc;

            if (!item.embedURL || item.embedURL.includes('/null') || item.embedURL === 'https://support.hp.com/null') {
                warnings.push({
                    type: 'Missing Video Link',
                    language: langName,
                    languageCode: item.lc,
                    issue: 'embedURL is null or missing',
                    url: item.embedURL || 'Not found'
                });
            }

            if (!item.thumbnail || item.thumbnail.includes('/null')) {
                warnings.push({
                    type: 'Missing Thumbnail',
                    language: langName,
                    languageCode: item.lc,
                    issue: 'Thumbnail URL is null or missing',
                    url: item.thumbnail || 'Not found'
                });
            }

            else if (item.thumbnail && !item.thumbnail.startsWith('https://kaas.hpcloud.hp.com')) {
                warnings.push({
                    type: 'Broken Thumbnail',
                    language: langName,
                    languageCode: item.lc,
                    issue: 'Thumbnail is broken, replace it with a working one',
                    url: item.thumbnail
                });
            }

            let refID = "";
            try {
                const urlObj = new URL(item.embedURL);
                const videoIdParam = urlObj.searchParams.get("videoId") || "";
                if(videoIdParam.startsWith("ref:")) {
                    refID = videoIdParam.substring(4);
                }
            } catch {
                refID = "";
            }

            if (!refID || refID === "") {
                warnings.push({
                    type: 'Missing RefID',
                    language: langName,
                    languageCode: item.lc,
                    issue: 'RefID could not be extracted from embedURL',
                    url: item.embedURL || 'Not found'
                });
            }
        });

        return warnings;
    }

function showWarningModal(warnings) {
    if (warnings.length === 0) return;

    const overlay = document.createElement("div");
    overlay.className = 'modal-overlay';
    overlay.style.overflowY = 'auto';
    overlay.style.zIndex = '10000000';
    const container = document.createElement("div");
    container.className = "modal-container warning-modal";
    container.style.maxWidth = "900px";
    container.style.width = "95%";

    const header = document.createElement("div");
    header.style.display = "flex";
    header.style.alignItems = "center";
    header.style.marginBottom = "25px";

    const warningIcon = document.createElement("span");
    warningIcon.className = "warning-icon";
    warningIcon.textContent = "⚠️";
    header.appendChild(warningIcon);

    const title = document.createElement("h3");
    title.textContent = `Warning: ${warnings.length} Issue${warnings.length !== 1 ? 's' : ''} Found`;
    title.style.margin = "0";
    title.style.fontSize = "24px";
    title.style.fontWeight = "600";
    header.appendChild(title);

    container.appendChild(header);

    const description = document.createElement("p");
    description.textContent = "The following issues were detected during extraction:";
    description.style.marginBottom = "20px";
    description.style.fontSize = "16px";
    description.style.lineHeight = "1.5";
    container.appendChild(description);

    const warningsList = document.createElement("div");
    Object.assign(warningsList.style, {
        maxHeight: "400px", overflowY: "auto", border: "1px solid #ffc107",
        borderRadius: "8px", padding: "15px", marginBottom: "25px",
        backgroundColor: "#fffbf0"
    });

    warnings.forEach((warning, index) => {
        const warningItem = document.createElement("div");
        Object.assign(warningItem.style, {
            padding: "15px", marginBottom: "15px", border: "1px solid #f0c36d",
            borderRadius: "8px", backgroundColor: "#fff",
            boxShadow: "0 2px 4px rgba(0,0,0,0.1)"
        });

        let pageUrl = '';
        let problematicUrl = warning.url;

        if (warning.type === 'Language Not Available') {

            const currentPath = window.location.pathname;
            const pathParts = currentPath.split('/');
            pathParts[1] = warning.languageCode;
            pageUrl = `${window.location.origin}${pathParts.join('/')}`;
            problematicUrl = 'ISH document does not exist in this language';
        } else {

            const parts = window.location.pathname.split('/');
            parts[1] = warning.languageCode;
            pageUrl = `${window.location.origin}${parts.join('/')}`;
        }

        warningItem.innerHTML = `
            <div style="font-weight: bold; color: #dc3545; margin-bottom: 8px; font-size: 16px;">
                ${warning.type}
            </div>
            <div style="margin-bottom: 5px; font-size: 14px;">
                <strong>Language:</strong> ${warning.language} (${warning.languageCode})
            </div>
            <div style="margin-bottom: 5px; font-size: 14px;">
                <strong>Issue:</strong> ${warning.issue}
            </div>
            <div style="margin-bottom: 8px; font-size: 14px;">
                <strong>Page URL:</strong>
                <a href="${pageUrl}" target="_blank" style="color: #007bff; text-decoration: underline; word-break: break-all;">
                    ${pageUrl}
                </a>
            </div>
            <div style="word-break: break-all; font-family: 'Consolas', 'Monaco', monospace; font-size: 12px; background: #f8f9fa; padding: 8px; border-radius: 4px; border-left: 3px solid #007bff;">
                <strong>Details:</strong><br>
                <span style="color: ${warning.type === 'Language Not Available' ? '#856404' : '#dc3545'};">${problematicUrl}</span>
            </div>
        `;

        warningsList.appendChild(warningItem);
    });

    container.appendChild(warningsList);

    const okButton = createButton("OK", "btn-warning");
    okButton.style.alignSelf = "center";
    okButton.onclick = () => {
        animateWindowOut(overlay, () => overlay.remove());
    };

    container.appendChild(okButton);
    overlay.appendChild(container);
    document.body.appendChild(overlay);

    animateWindowIn(overlay, container);
}

    function applySyntaxHighlighting(text) {
        return text
            .replace(/(\b(?:kind|id|variable|value|activity|attachments|cardContent|type|text|wrap|poster|sources|url|name)\s*):/g, '<span class="yaml-key">$1:</span>')
            .replace(/(:\s*)([-\w\s"'.,!?]+)(?=\n|$)/g, '$1<span class="yaml-string">$2</span>')
            .replace(/(\bhttps?:\/\/[^\s"']+)/g, '<span class="yaml-url">$1</span>')
            .replace(/(\bTopic\.\w+)/g, '<span class="yaml-variable">$1</span>')
            .replace(/(\bGlobal\.\w+)/g, '<span class="yaml-variable">$1</span>')
            .replace(/(\b(?:true|false)\b)/g, '<span class="yaml-boolean">$1</span>')
            .replace(/(\b\d+(?:\.\d+)?\b)/g, '<span class="yaml-number">$1</span>')
            .replace(/(#.*$)/gm, '<span class="yaml-comment">$1</span>');
    }

    async function showSelectionGUI(videos) {
        const existingOverlay = document.getElementById("video-select-overlay");
        if (existingOverlay) existingOverlay.remove();

        const overlay = document.createElement("div");
        overlay.id = "video-select-overlay";
        overlay.className = 'modal-overlay';
        overlay.style.flexDirection = 'column';

        const selectedLanguages = await getSelectedLanguages();
        const langCount = selectedLanguages.length;

        const header = document.createElement("div");
        header.textContent = `This ISH document contains ${videos.length} video${videos.length !== 1 ? "s" : ""}, please select one to extract across ${langCount} configured language${langCount !== 1 ? "s" : ""}:`;
        Object.assign(header.style, {
            color: "#fff", fontSize: "18px", marginBottom: "15px", fontWeight: "bold"
        });
        overlay.appendChild(header);

        const grid = document.createElement("div");
        grid.className = 'grid-auto';
        grid.style.width = "100%";
        grid.style.maxWidth = "900px";
        grid.style.marginBottom = "15px";

        videos.forEach((vid, index) => {
            const vidDiv = document.createElement("div");
            vidDiv.className = 'hover-card';
            Object.assign(vidDiv.style, {
                background: "#fff", borderRadius: "8px", padding: "12px",
                boxShadow: "0 4px 8px rgba(0,0,0,0.1)", display: "flex",
                flexDirection: "column", alignItems: "center"
            });

            const thumb = document.createElement("img");
            thumb.src = vid.thumbnail;
            thumb.alt = vid.title;
            Object.assign(thumb.style, {
                width: "160px", height: "90px", objectFit: "cover",
                borderRadius: "4px"
            });
            vidDiv.appendChild(thumb);

            const title = document.createElement("div");
            title.textContent = vid.title;
            Object.assign(title.style, {
                marginTop: "8px", fontSize: "14px", fontWeight: "600",
                textAlign: "center", minHeight: "38px"
            });
            vidDiv.appendChild(title);

            const selectBtn = createButton("Select", "btn-primary");
            selectBtn.style.marginTop = "10px";
            selectBtn.onclick = () => {
                showConfirmDialog(vid.title, index, overlay);
            };
            vidDiv.appendChild(selectBtn);
            grid.appendChild(vidDiv);
        });

        overlay.appendChild(grid);

        const closeBtn = document.createElement("button");
        closeBtn.textContent = "✕";
        Object.assign(closeBtn.style, {
            position: "absolute", top: "15px", right: "20px",
            fontSize: "20px", fontWeight: "bold", color: "#fff",
            background: "rgba(255,255,255,0.1)", border: "none", cursor: "pointer",
            borderRadius: "50%", width: "30px", height: "30px",
            display: "flex", alignItems: "center", justifyContent: "center",
            transition: "all 0.2s ease"
        });

        closeBtn.addEventListener('mouseenter', () => {
            closeBtn.style.background = "rgba(255,255,255,0.2)";
            closeBtn.style.transform = "scale(1.1)";
        });
        closeBtn.addEventListener('mouseleave', () => {
            closeBtn.style.background = "rgba(255,255,255,0.1)";
            closeBtn.style.transform = "scale(1)";
        });

        closeBtn.onclick = () => {
            animateWindowOut(overlay, () => overlay.remove());
        };
        overlay.appendChild(closeBtn);

        document.body.appendChild(overlay);
        animateWindowIn(overlay, grid);
    }

    function showConfirmDialog(title, videoIndex, overlay) {
        const existingConfirm = document.getElementById("video-confirm-box");
        if(existingConfirm) existingConfirm.remove();

        const confirmBox = document.createElement("div");
        confirmBox.id = "video-confirm-box";
        Object.assign(confirmBox.style, {
            position: "absolute", top: "50%", left: "50%",
            transform: "translate(-50%, -50%) scale(0.8)",
            background: "#fff", padding: "20px 30px", borderRadius: "8px",
            boxShadow: "0 8px 32px rgba(0,0,0,0.5)", display: "flex",
            flexDirection: "column", alignItems: "center", gap: "20px",
            maxWidth: "90vw", zIndex: 1000000, opacity: "0",
            transition: "all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1)"
        });

        const msg = document.createElement("div");
        msg.textContent = `"${title}" is selected, do you want to start the extraction?`;
        Object.assign(msg.style, {
            fontWeight: "600", fontSize: "16px", textAlign: "center", marginBottom: "10px"
        });
        confirmBox.appendChild(msg);

        const buttonsContainer = document.createElement("div");
        buttonsContainer.style.display = "flex";
        buttonsContainer.style.gap = "15px";

        const yesBtn = createButton("Yes", "btn-success");
        yesBtn.onclick = async () => {
            await GM_setValue("selected_video_title", title);
            confirmBox.style.transform = "translate(-50%, -50%) scale(0.9)";
            confirmBox.style.opacity = "0";

            setTimeout(() => {
                confirmBox.remove();
                animateWindowOut(overlay, async () => {
                    overlay.remove();
                    await startExtraction(videoIndex);
                });
            }, 300);
        };
        buttonsContainer.appendChild(yesBtn);

        const noBtn = createButton("No", "btn-secondary");
        noBtn.onclick = () => {
            confirmBox.style.transform = "translate(-50%, -50%) scale(0.9)";
            confirmBox.style.opacity = "0";
            setTimeout(() => { confirmBox.remove(); }, 300);
        };
        buttonsContainer.appendChild(noBtn);

        confirmBox.appendChild(buttonsContainer);
        overlay.appendChild(confirmBox);

        requestAnimationFrame(() => {
            confirmBox.style.opacity = "1";
            confirmBox.style.transform = "translate(-50%, -50%) scale(1)";
        });
    }

    async function showLanguageConfigGUI() {
        const existingOverlay = document.getElementById("language-config-overlay");
        if (existingOverlay) existingOverlay.remove();

        const overlay = document.createElement("div");
        overlay.id = "language-config-overlay";
        overlay.className = 'modal-overlay';

        const container = document.createElement("div");
        container.className = 'modal-container';
        Object.assign(container.style, {
            width: "90%", maxWidth: "600px", display: "flex",
            flexDirection: "column", gap: "15px"
        });

        const header = document.createElement("h3");
        header.textContent = "Configure Languages for Extraction";
        header.style.margin = "0";
        header.style.textAlign = "center";
        container.appendChild(header);

        const bulkControls = document.createElement("div");
        Object.assign(bulkControls.style, {
            display: "flex", gap: "10px", justifyContent: "center",
            borderBottom: "1px solid #ddd", paddingBottom: "15px"
        });

        const selectAllBtn = createButton("Select All", "btn-primary");
        const clearAllBtn = createButton("Clear All", "btn-secondary");

        bulkControls.appendChild(selectAllBtn);
        bulkControls.appendChild(clearAllBtn);
        container.appendChild(bulkControls);

        const langListContainer = document.createElement("div");
        Object.assign(langListContainer.style, {
            maxHeight: "300px", overflowY: "auto", border: "1px solid #ddd",
            borderRadius: "4px", padding: "10px"
        });

        const selectedLanguages = await getSelectedLanguages();
        const checkboxes = [];
        AVAILABLE_LANGS.forEach(lang => {
            const langItem = document.createElement("div");
            Object.assign(langItem.style, {
                display: "flex", alignItems: "center", gap: "8px",
                padding: "5px 0", borderBottom: "1px solid #eee"
            });

            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.value = lang.code;
            checkbox.checked = selectedLanguages.includes(lang.code);
            checkbox.style.cursor = "pointer";
            checkboxes.push(checkbox);

            const label = document.createElement("label");
            label.textContent = `${lang.name} - ${lang.code}`;
            label.style.cursor = "pointer";
            label.style.flex = "1";
            label.onclick = () => checkbox.click();

            langItem.appendChild(checkbox);
            langItem.appendChild(label);
            langListContainer.appendChild(langItem);
        });

        container.appendChild(langListContainer);

        const waitTimeSection = document.createElement("div");
        Object.assign(waitTimeSection.style, {
            borderTop: "1px solid #ddd", paddingTop: "15px", marginTop: "15px"
        });

        const waitTimeLabel = document.createElement("label");
        waitTimeLabel.textContent = "Wait time between pages:";
        waitTimeLabel.style.fontWeight = "bold";
        waitTimeLabel.style.display = "block";
        waitTimeLabel.style.marginBottom = "10px";
        waitTimeSection.appendChild(waitTimeLabel);

        const sliderContainer = document.createElement("div");
        Object.assign(sliderContainer.style, {
            display: "flex", alignItems: "center", gap: "10px"
        });

        const waitTimeSlider = document.createElement("input");
        waitTimeSlider.type = "range";
        waitTimeSlider.min = "1";
        waitTimeSlider.max = "10";
        waitTimeSlider.step = "1";
        waitTimeSlider.value = await getWaitTime();
        Object.assign(waitTimeSlider.style, {
            flex: "1", cursor: "pointer"
        });

        const waitTimeValue = document.createElement("span");
        waitTimeValue.textContent = `${waitTimeSlider.value}s`;
        Object.assign(waitTimeValue.style, {
            minWidth: "30px", fontWeight: "bold", color: "#007bff"
        });

        waitTimeSlider.addEventListener('input', () => {
            waitTimeValue.textContent = `${waitTimeSlider.value}s`;
        });

        sliderContainer.appendChild(waitTimeSlider);
        sliderContainer.appendChild(waitTimeValue);
        waitTimeSection.appendChild(sliderContainer);
        container.appendChild(waitTimeSection);

        const clearDataSection = document.createElement("div");
        Object.assign(clearDataSection.style, {
            borderTop: "1px solid #ddd", paddingTop: "15px", marginTop: "15px",
            textAlign: "center"
        });

        const clearDataBtn = createButton("Clear All Data", "btn-danger");

        clearDataBtn.onclick = async () => {
    if (confirm("Are you sure you want to clear all saved data? This will reset languages and wait time settings.")) {
        await GM_setValue("selected_languages", []);
        await GM_setValue("wait_time", 3);
        await GM_setValue("video_data", []);
        await GM_setValue("skipped_languages", []);
        await GM_setValue("original_document_url", "");
        await GM_setValue("selected_index", null);
        await GM_setValue("current_lang_index", 0);
        await GM_setValue("total_languages", 0);
                await GM_setValue("skipped_languages", []);
                checkboxes.forEach(cb => cb.checked = false);
                waitTimeSlider.value = 3;
                waitTimeValue.textContent = "3s";
                updateSaveButtonState();
                await resetExtractButton();
                alert("All data cleared successfully!");
            }
        };

        const clearDataLabel = document.createElement("div");
        clearDataLabel.textContent = "Reset all settings and clear stored data";
        Object.assign(clearDataLabel.style, {
            fontSize: "12px", color: "#666", marginBottom: "8px"
        });

        clearDataSection.appendChild(clearDataLabel);
        clearDataSection.appendChild(clearDataBtn);
        container.appendChild(clearDataSection);

        selectAllBtn.onclick = () => {
            checkboxes.forEach(cb => cb.checked = true);
            updateSaveButtonState();
        };

        clearAllBtn.onclick = () => {
            checkboxes.forEach(cb => cb.checked = false);
            updateSaveButtonState();
        };

        const footer = document.createElement("div");
Object.assign(footer.style, {
    display: "flex", gap: "10px", justifyContent: "center",
    borderTop: "1px solid #ddd", paddingTop: "15px"
});

        const saveBtn = createButton("Continue", "btn-success");
        const cancelBtn = createButton("Cancel", "btn-secondary");

        function updateSaveButtonState() {
            const hasSelection = checkboxes.some(cb => cb.checked);
            saveBtn.disabled = !hasSelection;
            saveBtn.style.opacity = hasSelection ? "1" : "0.5";
            saveBtn.style.cursor = hasSelection ? "pointer" : "not-allowed";
        }

        checkboxes.forEach(cb => {
            cb.addEventListener('change', updateSaveButtonState);
        });

        updateSaveButtonState();

        saveBtn.onclick = async () => {
            const selected = checkboxes.filter(cb => cb.checked).map(cb => cb.value);
            if (selected.length === 0) {
                alert("Please select at least one language.");
                return;
            }
            await setSelectedLanguages(selected);
            await setWaitTime(parseInt(waitTimeSlider.value));
            animateWindowOut(overlay, () => {
                overlay.remove();
                proceedToVideoSelection();
            });
        };

        cancelBtn.onclick = () => {
            animateWindowOut(overlay, () => overlay.remove());
        };

        footer.appendChild(cancelBtn);
        footer.appendChild(saveBtn);
        container.appendChild(footer);

        const closeBtn = document.createElement("button");
        closeBtn.textContent = "×";
        Object.assign(closeBtn.style, {
            position: "absolute", top: "10px", right: "15px",
            fontSize: "24px", fontWeight: "bold", color: "#fff",
            background: "transparent", border: "none", cursor: "pointer"
        });
        closeBtn.onclick = () => {
            animateWindowOut(overlay, () => overlay.remove());
        };

        closeBtn.addEventListener('mouseenter', () => {
            closeBtn.style.background = "rgba(255,255,255,0.2)";
            closeBtn.style.transform = "scale(1.1)";
        });
        closeBtn.addEventListener('mouseleave', () => {
            closeBtn.style.background = "transparent";
            closeBtn.style.transform = "scale(1)";
        });

        overlay.appendChild(container);
        overlay.appendChild(closeBtn);
        document.body.appendChild(overlay);

        animateWindowIn(overlay, container);
    }

    async function proceedToVideoSelection() {
        const currentLC = window.location.pathname.split("/")[1];
        const videos = extractVideos(currentLC);
        if (videos.length === 0) {
            alert("No videos found on this page.");
            return;
        }
        showSelectionGUI(videos);
    }

async function startExtraction(selectedIndex) {
    const hasLanguages = await hasConfiguredLanguages();
    if (!hasLanguages) {
        alert("No languages configured. Please configure languages first.");
        return;
    }
    const selectedLanguages = await getLanguagesForExtraction();

    const originalUrl = window.location.href;
    await GM_setValue("original_document_url", originalUrl);

    await GM_setValue("total_languages", selectedLanguages.length);
    await GM_setValue("video_data", []);
    await GM_setValue("skipped_languages", []);
    await GM_setValue("selected_index", selectedIndex);
    await extractVideosAcrossLanguages(0, selectedIndex);
}

async function extractVideosAcrossLanguages(langIdx, selectedIndex) {
    const selectedLanguages = await getLanguagesForExtraction();
    const totalLanguages = await GM_getValue("total_languages", selectedLanguages.length);

    if (langIdx >= selectedLanguages.length) {
        const videoData = await GM_getValue("video_data", []);
        await resetExtractButton();
        showCompletionConfirmation(videoData);
        return;
    }

    await updateExtractButtonProgress(langIdx + 1, totalLanguages);
    const lc = selectedLanguages[langIdx];

    const originalUrl = await GM_getValue("original_document_url", window.location.href);
    let newUrl;

    if (originalUrl.includes('/error/')) {

        const parts = window.location.pathname.split('/');
        const documentId = new URLSearchParams(window.location.search).get('documentId') || 'ish_unknown';
        newUrl = `${window.location.origin}/${lc}/document/${documentId}`;
    } else {

        const urlObj = new URL(originalUrl);
        const pathParts = urlObj.pathname.split('/');
        pathParts[1] = lc;
        newUrl = `${urlObj.origin}${pathParts.join('/')}${urlObj.search}${urlObj.hash}`;
    }

    await GM_setValue("current_lang_index", langIdx);
    console.log(`Going to language ${lc}: ${newUrl}`);
    window.location.href = newUrl;
}

async function showCompletionConfirmation(videoData) {
    const existingOverlay = document.getElementById("completion-confirmation-overlay");
    if (existingOverlay) existingOverlay.remove();

    const skippedLanguages = await GM_getValue("skipped_languages", []);

    const warnings = checkForMissingData(videoData);

    skippedLanguages.forEach(langCode => {
        const langName = AVAILABLE_LANGS.find(lang => lang.code === langCode)?.name || langCode;
        warnings.push({
            type: 'Language Not Available',
            language: langName,
            languageCode: langCode,
            issue: 'ISH document does not exist in this language',
            url: 'Document not available'
        });
    });

    const overlay = document.createElement("div");
    overlay.id = "completion-confirmation-overlay";
    overlay.className = 'modal-overlay';

    const container = document.createElement("div");
    container.className = 'modal-container';
    Object.assign(container.style, {
        maxWidth: "500px", width: "90%", textAlign: "center"
    });

    const successIcon = document.createElement("div");
    successIcon.textContent = "✓";
    Object.assign(successIcon.style, {
        fontSize: "48px", color: "#28a745", fontWeight: "bold",
        marginBottom: "20px", display: "block"
    });
    container.appendChild(successIcon);

    const title = document.createElement("h2");
    title.textContent = "Extraction Complete!";
    Object.assign(title.style, {
        margin: "0 0 15px 0", color: "#333", fontSize: "24px"
    });
    container.appendChild(title);

    const message = document.createElement("p");
    message.textContent = `Extraction of links and thumbnails completed successfully. Found ${videoData.length} result${videoData.length !== 1 ? 's' : ''} across selected languages.`;
    Object.assign(message.style, {
        margin: "0 0 25px 0", color: "#666", fontSize: "16px", lineHeight: "1.5"
    });
    container.appendChild(message);

    if (warnings.length > 0) {
        const warningNote = document.createElement("p");
        warningNote.textContent = `⚠️ ${warnings.length} issue${warnings.length !== 1 ? 's' : ''} detected in extraction results.`;
        Object.assign(warningNote.style, {
            margin: "0 0 25px 0", color: "#856404", fontSize: "14px", fontWeight: "bold",
            backgroundColor: "#fff3cd", padding: "10px", borderRadius: "4px",
            border: "1px solid #ffc107"
        });
        container.appendChild(warningNote);
    }

    const buttonsContainer = document.createElement("div");
    Object.assign(buttonsContainer.style, {
        display: "flex", gap: "15px", justifyContent: "center"
    });

    const showResultsBtn = createButton("Show Results", "btn-success");
    showResultsBtn.onclick = () => {
        animateWindowOut(overlay, () => {
            overlay.remove();
            if (warnings.length > 0) {
                showWarningModal(warnings);
            }
            showFinalPrompt(videoData, videoData.length);
            GM_setValue("video_data", []);
            GM_setValue("skipped_languages", []);
            GM_setValue("selected_index", null);
        });
    };

    const exitBtn = createButton("Exit", "btn-secondary");
    exitBtn.onclick = () => {
        animateWindowOut(overlay, () => {
            overlay.remove();
            GM_setValue("video_data", []);
            GM_setValue("skipped_languages", []);
            GM_setValue("selected_index", null);
        });
    };

    buttonsContainer.appendChild(showResultsBtn);
    buttonsContainer.appendChild(exitBtn);
    container.appendChild(buttonsContainer);

    overlay.appendChild(container);
    document.body.appendChild(overlay);

    animateWindowIn(overlay, container);
}

async function continueExtractionAfterLoad() {

    let currentLC;

    if (isErrorPage()) {

        const pathParts = window.location.pathname.split("/");
        currentLC = pathParts[1];
        console.log(`Detected error page for language: ${currentLC}`);
    } else {

        currentLC = window.location.pathname.split("/")[1];
    }

    const selectedIndex = await GM_getValue("selected_index", null);
    if (selectedIndex === null) return;

    const selectedLanguages = await getLanguagesForExtraction();
    const langIdx = selectedLanguages.findIndex(l => l === currentLC);

    if (isErrorPage()) {
        console.log(`Language ${currentLC} doesn't exist for this document - adding to skipped list`);

        const skippedLanguages = await GM_getValue("skipped_languages", []);
        if (!skippedLanguages.includes(currentLC)) {
            skippedLanguages.push(currentLC);
            await GM_setValue("skipped_languages", skippedLanguages);
        }

        const extractBtn = document.getElementById("extract-btn");
        if (extractBtn) {
            const totalLanguages = await GM_getValue("total_languages", selectedLanguages.length);

            const currentPosition = langIdx !== -1 ? langIdx + 1 : await GM_getValue("current_lang_index", 0) + 1;
            extractBtn.textContent = `SKIPPING ${currentPosition}/${totalLanguages} - ${currentLC} not available`;
        }

        await delay(3000);

        const nextIndex = langIdx !== -1 ? langIdx + 1 : await GM_getValue("current_lang_index", 0) + 1;
        await extractVideosAcrossLanguages(nextIndex, selectedIndex);
        return;
    }

    if (langIdx === -1) {
        const currentLangIndex = await GM_getValue("current_lang_index", 0);
        await extractVideosAcrossLanguages(currentLangIndex + 1, selectedIndex);
        return;
    }

    const totalLanguages = await GM_getValue("total_languages", selectedLanguages.length);
    await updateExtractButtonProgress(langIdx + 1, totalLanguages);

    const waitTime = await getWaitTime();
    await delay(waitTime * 1000);

    const videos = extractVideos(currentLC);
    if (videos.length === 0) {
        await extractVideosAcrossLanguages(langIdx + 1, selectedIndex);
        return;
    }

    const selectedVideo = videos[selectedIndex];
    if (!selectedVideo) {
        await extractVideosAcrossLanguages(langIdx + 1, selectedIndex);
        return;
    }

    const videoData = await GM_getValue("video_data", []);
    videoData.push(selectedVideo);
    await GM_setValue("video_data", videoData);

    await extractVideosAcrossLanguages(langIdx + 1, selectedIndex);
}

function showFinalPrompt(dataArray, count) {
    const overlay = document.createElement("div");
    overlay.className = 'modal-overlay';
    overlay.style.overflowY = 'auto';

    const box = document.createElement("div");
    Object.assign(box.style, {
        background: "#fff", padding: "20px", borderRadius: "8px",
        width: "95%", maxHeight: "90vh", overflowY: "auto",
        display: "flex", flexDirection: "column", gap: "20px"
    });

    const title = document.createElement("h3");
    title.textContent = `Extracted data:`;
    box.appendChild(title);

    const rawContainer = document.createElement("div");
    rawContainer.style.position = "relative";
    rawContainer.style.marginBottom = "10px";

    const rawLabel = document.createElement("label");
    rawLabel.textContent = "RAW Data Table:";
    rawLabel.style.fontWeight = "bold";
    rawLabel.style.display = "block";
    rawLabel.style.marginBottom = "35px";
    rawContainer.appendChild(rawLabel);

    const rawCopyAllBtn = createButton("Copy", "btn-success");
    Object.assign(rawCopyAllBtn.style, {
        position: "absolute", right: "0", top: "-5px", zIndex: "1000",
        boxShadow: "0 2px 4px rgba(0,0,0,0.1)"
    });
    rawContainer.appendChild(rawCopyAllBtn);

    const brokenThumbnails = dataArray.filter(item =>
        item.thumbnail && !item.thumbnail.startsWith('https://kaas.hpcloud.hp.com')
    );

    if (brokenThumbnails.length > 0) {
        const replaceThumbnailsBtn = createButton("Replace broken thumbnails", "btn-danger");
replaceThumbnailsBtn.classList.add('replace-thumbnails-attention');
        Object.assign(replaceThumbnailsBtn.style, {
            position: "absolute", right: "130px", top: "-5px", zIndex: "1000",
            boxShadow: "0 2px 4px rgba(0,0,0,0.1)"
        });

        replaceThumbnailsBtn.onclick = () => {
            showThumbnailReplacementModal(dataArray, overlay);
        };

        rawContainer.appendChild(replaceThumbnailsBtn);
    }

    if (dataArray.length === 0) {
        const noDataMsg = document.createElement("div");
        noDataMsg.textContent = "No data extracted.";
        Object.assign(noDataMsg.style, {
            padding: "20px", textAlign: "center", color: "#666"
        });
        rawContainer.appendChild(noDataMsg);
    } else {
        const tableContainer = document.createElement("div");
        Object.assign(tableContainer.style, {
            border: "1px solid #ddd", borderRadius: "6px", overflow: "auto",
            maxHeight: "300px", backgroundColor: "#fff",
            boxShadow: "inset 0 1px 3px rgba(0,0,0,0.1)"
        });

        const table = document.createElement("table");
        table.className = 'data-table';

        const thead = document.createElement("thead");
        const headerRow = document.createElement("tr");
        headerRow.style.backgroundColor = "#f8f9fa";
        headerRow.style.borderBottom = "2px solid #dee2e6";

        const headers = ["Language", "Thumbnail URL", "Video URL", "RefID"];
        headers.forEach((headerText, index) => {
            const th = document.createElement("th");
            th.textContent = headerText;
            th.style.borderRight = index < headers.length - 1 ? "1px solid #dee2e6" : "none";
            headerRow.appendChild(th);
        });
        thead.appendChild(headerRow);
        table.appendChild(thead);

        const tbody = document.createElement("tbody");

        dataArray.forEach((item, rowIndex) => {
            const row = document.createElement("tr");

            const langName = AVAILABLE_LANGS.find(lang => lang.code === item.lc)?.name || item.lc;

            let refID = "";
            try {
                const urlObj = new URL(item.embedURL);
                const videoIdParam = urlObj.searchParams.get("videoId") || "";
                if(videoIdParam.startsWith("ref:")) {
                    refID = videoIdParam.substring(4);
                }
            } catch {
                refID = "N/A";
            }

            const cellData = [
                { content: langName, fullContent: `${langName} (${item.lc})` },
                { content: item.thumbnail, fullContent: item.thumbnail },
                { content: item.embedURL, fullContent: item.embedURL },
                { content: refID || "N/A", fullContent: refID || "N/A" }
            ];

            cellData.forEach((cellInfo, cellIndex) => {
                const td = document.createElement("td");
                td.style.borderRight = cellIndex < cellData.length - 1 ? "1px solid #dee2e6" : "none";
                td.style.maxWidth = cellIndex === 0 ? "120px" : "200px";

                const contentSpan = document.createElement("span");
                contentSpan.textContent = cellInfo.content;

                if (cellIndex === 1 && cellInfo.content && !cellInfo.content.startsWith('https://kaas.hpcloud.hp.com')) {
                    contentSpan.style.color = "#dc3545";
                    contentSpan.style.fontWeight = "bold";
                }

                td.appendChild(contentSpan);

                const tooltip = document.createElement("div");
                tooltip.className = 'tooltip';
                tooltip.textContent = cellInfo.fullContent;
                td.appendChild(tooltip);

                td.addEventListener('mouseenter', () => {
                    td.style.backgroundColor = "#e3f2fd";
                    td.style.transform = "scale(1.02)";
                    tooltip.style.opacity = "1";
                    tooltip.style.visibility = "visible";
                });

                td.addEventListener('mouseleave', () => {
                    td.style.backgroundColor = "transparent";
                    td.style.transform = "scale(1)";
                    tooltip.style.opacity = "0";
                    tooltip.style.visibility = "hidden";
                });

                td.addEventListener('click', () => {
                    navigator.clipboard.writeText(cellInfo.fullContent).then(() => {
                        const originalContent = contentSpan.textContent;
                        const originalColor = contentSpan.style.color;
                        const originalWeight = contentSpan.style.fontWeight;

                        contentSpan.textContent = "✓ Copied!";
                        contentSpan.style.color = "#28a745";
                        contentSpan.style.fontWeight = "bold";
                        td.style.backgroundColor = "#d4edda";

                        setTimeout(() => {
                            contentSpan.textContent = originalContent;
                            contentSpan.style.color = originalColor;
                            contentSpan.style.fontWeight = originalWeight;
                            td.style.backgroundColor = "";
                        }, 1500);
                    }).catch(() => {
                        const textArea = document.createElement('textarea');
                        textArea.value = cellInfo.fullContent;
                        document.body.appendChild(textArea);
                        textArea.select();
                        document.execCommand('copy');
                        document.body.removeChild(textArea);

                        const originalContent = contentSpan.textContent;
                        const originalColor = contentSpan.style.color;
                        const originalWeight = contentSpan.style.fontWeight;

                        contentSpan.textContent = "✓ Copied!";
                        contentSpan.style.color = "#28a745";
                        contentSpan.style.fontWeight = "bold";
                        td.style.backgroundColor = "#d4edda";

                        setTimeout(() => {
                            contentSpan.textContent = originalContent;
                            contentSpan.style.color = originalColor;
                            contentSpan.style.fontWeight = originalWeight;
                            td.style.backgroundColor = "";
                        }, 1500);
                    });
                });

                row.appendChild(td);
            });

            tbody.appendChild(row);
        });

        table.appendChild(tbody);
        tableContainer.appendChild(table);
        rawContainer.appendChild(tableContainer);

        rawCopyAllBtn.onclick = () => {
            const videoTitle = dataArray[0].title || "(No title)";
            let rawText = `Video title: ${videoTitle}\n\n`;
            dataArray.forEach(item => {
                const langName = AVAILABLE_LANGS.find(lang => lang.code === item.lc)?.name || item.lc;
                let refID = "";
                try {
                    const urlObj = new URL(item.embedURL);
                    const videoIdParam = urlObj.searchParams.get("videoId") || "";
                    if(videoIdParam.startsWith("ref:")) {
                        refID = videoIdParam.substring(4);
                    }
                } catch {
                    refID = "N/A";
                }
                rawText += `${langName} (${item.lc})\nThumbnail: ${item.thumbnail}\nVideo link: ${item.embedURL}\nRefID: ${refID}\n\n`;
            });

            navigator.clipboard.writeText(rawText.trim()).then(() => {
                rawCopyAllBtn.textContent = "Copied!";
                rawCopyAllBtn.className = "btn-base btn-success";
                setTimeout(() => {
                    rawCopyAllBtn.textContent = "Copy All";
                    rawCopyAllBtn.className = "btn-base btn-success";
                }, 1500);
            }).catch(() => {
                const textArea = document.createElement('textarea');
                textArea.value = rawText.trim();
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                rawCopyAllBtn.textContent = "Copied!";
                setTimeout(() => {
                    rawCopyAllBtn.textContent = "Copy All";
                }, 1500);
            });
        };
    }

    box.appendChild(rawContainer);

    const tableContainer = document.createElement("div");
    tableContainer.style.position = "relative";

    const tableLabel = document.createElement("label");
    tableLabel.textContent = "Video Table for YAML:";
    tableLabel.style.fontWeight = "bold";
    tableContainer.appendChild(tableLabel);

    const tableCopyBtn = createButton("Copy", "btn-success");
    Object.assign(tableCopyBtn.style, {
        position: "absolute", right: "0", top: "0"
    });
    tableContainer.appendChild(tableCopyBtn);

    const tableTextarea = document.createElement("textarea");
    Object.assign(tableTextarea.style, {
        width: "100%",
        height: "260px",
        fontFamily: "'Fira Code', 'JetBrains Mono', 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', 'Consolas', monospace",
        fontSize: "11px",
        lineHeight: "1.4",
        padding: "16px",
        border: "1px solid #e1e5e9",
        borderRadius: "8px",
        backgroundColor: "#f8f9fa",
        color: "#2d3748",
        resize: "vertical",
        outline: "none",
        letterSpacing: "0.025em",
        tabSize: "2",
        whiteSpace: "pre",
        overflowWrap: "normal",
        boxShadow: "inset 0 1px 3px rgba(0,0,0,0.1)",
        boxSizing: "border-box"
    });

    tableTextarea.addEventListener('focus', () => {
        tableTextarea.style.borderColor = "#4299e1";
        tableTextarea.style.boxShadow = "inset 0 1px 3px rgba(0,0,0,0.1), 0 0 0 3px rgba(66,153,225,0.1)";
    });

    tableTextarea.addEventListener('blur', () => {
        tableTextarea.style.borderColor = "#e1e5e9";
        tableTextarea.style.boxShadow = "inset 0 1px 3px rgba(0,0,0,0.1)";
    });

    tableTextarea.readOnly = true;

    const tableEntries = dataArray.map(({lc, thumbnail, embedURL}) => {
        const shortLC = getShortLC(lc);
        let refID = "";
        try {
            const urlObj = new URL(embedURL);
            const videoIdParam = urlObj.searchParams.get("videoId") || "";
            if(videoIdParam.startsWith("ref:")) {
                refID = videoIdParam.substring(4);
            }
        } catch {
            refID = "";
        }
        return `    {lc:"${shortLC}",Thumbnail:"${thumbnail}",embedURL:"${embedURL}",refID:"${refID}"}`;
    });

    const tableString = `value: |-
  =Table(
${tableEntries.join(",\n")}
  )`;
    tableTextarea.value = tableString;

    tableCopyBtn.onclick = () => {
        tableTextarea.select();
        document.execCommand('copy');
        tableCopyBtn.textContent = "Copied!";
        setTimeout(() => tableCopyBtn.textContent = "Copy", 1500);
    };

    tableContainer.appendChild(tableTextarea);
    box.appendChild(tableContainer);

    const buttonsContainer = document.createElement("div");
    Object.assign(buttonsContainer.style, {
        display: "flex", gap: "15px", justifyContent: "flex-end", alignItems: "center"
    });

    const addStepsBtn = createButton("Add Steps", "btn-primary");
    addStepsBtn.onclick = () => {
        showStepsOptionsModal(dataArray);
    };

    const closeBtn = createButton("Close", "btn-secondary");
    closeBtn.onclick = () => document.body.removeChild(overlay);

    buttonsContainer.appendChild(addStepsBtn);
    buttonsContainer.appendChild(closeBtn);
    box.appendChild(buttonsContainer);

overlay.appendChild(box);
document.body.appendChild(overlay);
animateWindowIn(overlay, box);
}

    function showThumbnailReplacementModal(dataArray, parentOverlay) {
        const overlay = document.createElement("div");
        overlay.className = 'modal-overlay';
        overlay.style.background = "rgba(0,0,0,0.9)";
        overlay.style.zIndex = 9999999;

        const container = document.createElement("div");
        container.className = 'modal-container';
        Object.assign(container.style, {
            width: "90%", maxWidth: "800px", display: "flex", flexDirection: "column", gap: "20px"
        });

        const title = document.createElement("h2");
        title.textContent = "Replace Broken Thumbnails";
        Object.assign(title.style, {
            margin: "0", color: "#333", fontSize: "24px", fontWeight: "600", textAlign: "center"
        });
        container.appendChild(title);

        const description = document.createElement("p");
        description.textContent = "Select a working thumbnail from the list below to replace all broken thumbnails:";
        Object.assign(description.style, {
            margin: "0", color: "#666", fontSize: "16px", textAlign: "center"
        });
        container.appendChild(description);

        const workingThumbnails = dataArray.filter(item =>
            item.thumbnail && item.thumbnail.startsWith('https://kaas.hpcloud.hp.com')
        );

        if (workingThumbnails.length === 0) {
            const noWorkingMsg = document.createElement("div");
            noWorkingMsg.textContent = "No working thumbnails found to use as replacement.";
            Object.assign(noWorkingMsg.style, {
                padding: "20px", textAlign: "center", color: "#dc3545",
                backgroundColor: "#f8d7da", borderRadius: "8px", border: "1px solid #f5c6cb"
            });
            container.appendChild(noWorkingMsg);
        } else {
            const thumbnailsContainer = document.createElement("div");
            thumbnailsContainer.className = 'grid-thumb';
            Object.assign(thumbnailsContainer.style, {
                maxHeight: "400px", overflowY: "auto", padding: "10px",
                border: "1px solid #ddd", borderRadius: "8px"
            });

            workingThumbnails.forEach((item, index) => {
                const thumbnailDiv = document.createElement("div");
                thumbnailDiv.className = 'hover-card';
                Object.assign(thumbnailDiv.style, {
                    border: "2px solid #ddd", borderRadius: "8px", padding: "10px",
                    textAlign: "center", backgroundColor: "#fff"
                });

                const img = document.createElement("img");
                img.src = item.thumbnail;
                img.alt = "Thumbnail";
                Object.assign(img.style, {
                    width: "100%", maxWidth: "160px", height: "90px",
                    objectFit: "cover", borderRadius: "4px", marginBottom: "8px"
                });

                const langName = AVAILABLE_LANGS.find(lang => lang.code === item.lc)?.name || item.lc;
                const langLabel = document.createElement("div");
                langLabel.textContent = `${langName} (${item.lc})`;
                Object.assign(langLabel.style, {
                    fontSize: "12px", color: "#666", fontWeight: "500"
                });

                const selectBtn = createButton("Select This", "btn-success");
                selectBtn.style.marginTop = "8px";
                selectBtn.style.fontSize = "12px";

                selectBtn.onclick = () => {
                    replaceBrokenThumbnails(dataArray, item.thumbnail, overlay, parentOverlay);
                };

                thumbnailDiv.appendChild(img);
                thumbnailDiv.appendChild(langLabel);
                thumbnailDiv.appendChild(selectBtn);
                thumbnailsContainer.appendChild(thumbnailDiv);
            });

            container.appendChild(thumbnailsContainer);
        }

        const cancelBtn = createButton("Cancel", "btn-secondary");
        cancelBtn.onclick = () => {
            animateWindowOut(overlay, () => overlay.remove());
        };

        container.appendChild(cancelBtn);
        overlay.appendChild(container);
        document.body.appendChild(overlay);

        animateWindowIn(overlay, container);
    }
function showExtractionOverlay(current, total, timeLeft) {

    const existingOverlay = document.getElementById('extraction-blur-overlay');
    if (existingOverlay) existingOverlay.remove();

    const overlay = document.createElement('div');
    overlay.id = 'extraction-blur-overlay';
    overlay.className = 'extraction-overlay';

    const content = document.createElement('div');
    content.className = 'extraction-content';

    const spinner = document.createElement('div');
    spinner.className = 'extraction-spinner';

    const text = document.createElement('div');
    text.className = 'extraction-text';
    text.textContent = 'Extracting Data, please wait...';

    const progress = document.createElement('div');
    progress.className = 'extraction-progress';
    progress.id = 'extraction-progress-text';
    progress.textContent = `Processing ${current}/${total} languages (${timeLeft}s remaining)`;

    const stopBtn = document.createElement('button');
    stopBtn.className = 'extraction-stop-btn';
    stopBtn.textContent = 'Stop Extraction';
    stopBtn.id = 'extraction-overlay-stop-btn';

    stopBtn.onclick = async () => {
        if (confirm("Are you sure you want to stop the extraction and clear all data?")) {
            hideExtractionOverlay();

            await GM_setValue("selected_languages", []);
            await GM_setValue("wait_time", 3);
            await GM_setValue("video_data", []);
            await GM_setValue("selected_index", null);
            await GM_setValue("current_lang_index", 0);
            await GM_setValue("total_languages", 0);
            await GM_setValue("skipped_languages", []);
            await GM_setValue("original_document_url", "");
            await resetExtractButton();
            alert("Extraction stopped and data cleared!");
        }
    };

    content.appendChild(spinner);
    content.appendChild(text);
    content.appendChild(progress);
    content.appendChild(stopBtn);
    overlay.appendChild(content);

    document.body.appendChild(overlay);

    overlay.style.opacity = '0';
    setTimeout(() => overlay.style.opacity = '1', 10);
}

function updateExtractionProgress(current, total, timeLeft) {
    const progressText = document.getElementById('extraction-progress-text');
    if (progressText) {
        progressText.textContent = `Processing ${current}/${total} languages (${timeLeft}s remaining)`;
    }
}

function hideExtractionOverlay() {
    const overlay = document.getElementById('extraction-blur-overlay');
    if (overlay) {
        overlay.style.opacity = '0';
        setTimeout(() => overlay.remove(), 300);
    }
}

function updateExtractionProgress(current, total, timeLeft) {
    const progressText = document.getElementById('extraction-progress-text');
    if (progressText) {
        progressText.textContent = `Processing ${current}/${total} languages (${timeLeft}s remaining)`;
    }
}

function hideExtractionOverlay() {
    const overlay = document.getElementById('extraction-blur-overlay');
    if (overlay) {
        overlay.style.opacity = '0';
        setTimeout(() => overlay.remove(), 300);
    }
}

    function replaceBrokenThumbnails(dataArray, replacementThumbnail, modalOverlay, parentOverlay) {
        let replacedCount = 0;
        dataArray.forEach(item => {
            if (item.thumbnail && !item.thumbnail.startsWith('https://kaas.hpcloud.hp.com')) {
                item.thumbnail = replacementThumbnail;
                replacedCount++;
            }
        });

        animateWindowOut(modalOverlay, () => {
            modalOverlay.remove();
            showReplacementSuccessModal(replacedCount, parentOverlay, dataArray);
        });
    }

    function showReplacementSuccessModal(replacedCount, parentOverlay, dataArray) {
        const overlay = document.createElement("div");
        overlay.className = 'modal-overlay';
        overlay.style.background = "rgba(0,0,0,0.9)";
        overlay.style.zIndex = 9999999;

        const container = document.createElement("div");
        container.className = 'modal-container';
        Object.assign(container.style, {
            maxWidth: "500px", width: "90%", textAlign: "center"
        });

        const successIcon = document.createElement("div");
        successIcon.textContent = "✓";
        Object.assign(successIcon.style, {
            fontSize: "48px", color: "#28a745", fontWeight: "bold", marginBottom: "20px", display: "block"
        });
        container.appendChild(successIcon);

        const title = document.createElement("h2");
        title.textContent = "Thumbnails Replaced!";
        Object.assign(title.style, {
            margin: "0 0 15px 0", color: "#333", fontSize: "24px"
        });
        container.appendChild(title);

        const message = document.createElement("p");
        message.textContent = `Successfully replaced ${replacedCount} broken thumbnail${replacedCount !== 1 ? 's' : ''} with the selected working thumbnail.`;
        Object.assign(message.style, {
            margin: "0 0 25px 0", color: "#666", fontSize: "16px", lineHeight: "1.5"
        });
        container.appendChild(message);

        const okBtn = createButton("OK", "btn-success");
        okBtn.onclick = () => {
            animateWindowOut(overlay, () => {
                overlay.remove();
                parentOverlay.remove();
                showFinalPrompt(dataArray, dataArray.length);
            });
        };

        container.appendChild(okBtn);
        overlay.appendChild(container);
        document.body.appendChild(overlay);

        animateWindowIn(overlay, container);
    }

    function showStepsOptionsModal(dataArray) {
        const overlay = document.createElement("div");
        overlay.className = 'modal-overlay';

        const container = document.createElement("div");
        container.className = 'modal-container';
        Object.assign(container.style, {
            width: "90%", maxWidth: "600px", display: "flex", flexDirection: "column",
            gap: "25px", textAlign: "center"
        });

        const title = document.createElement("h2");
        title.textContent = "Choose Steps Configuration";
        Object.assign(title.style, {
            margin: "0", color: "#333", fontSize: "24px", fontWeight: "600"
        });
        container.appendChild(title);

        const description = document.createElement("p");
        description.textContent = "Configure your custom variable names and choose what steps to add:";
        Object.assign(description.style, {
            margin: "0", color: "#666", fontSize: "16px", lineHeight: "1.5"
        });

        const variablesSection = document.createElement("div");
        Object.assign(variablesSection.style, {
            textAlign: "left", padding: "20px", backgroundColor: "#f8f9fa",
            borderRadius: "8px", border: "1px solid #dee2e6"
        });

        const variablesTitle = document.createElement("h3");
        variablesTitle.textContent = "Custom Variable Names";
        Object.assign(variablesTitle.style, {
            margin: "0 0 15px 0", color: "#495057", fontSize: "18px", fontWeight: "600"
        });

        const inputs = [
            { label: "Video Table Variable:", value: "Topic.videoTable1", placeholder: "Topic.videoTable1" },
            { label: "Relevant Video Variable:", value: "Topic.relevantVid1", placeholder: "Topic.relevantVid1" },
            { label: "Steps Before Video Variable:", value: "Topic.stepsBeforeVid1", placeholder: "Topic.stepsBeforeVid1" },
            { label: "Steps After Video Variable:", value: "Topic.stepsAfterVid1", placeholder: "Topic.stepsAfterVid1" }
        ];

        const inputElements = {};

        inputs.forEach((inputConfig, index) => {
            const label = document.createElement("label");
            label.textContent = inputConfig.label;
            Object.assign(label.style, {
                display: "block", fontWeight: "bold", marginBottom: "5px", color: "#495057"
            });

            const input = document.createElement("input");
            input.type = "text";
            input.value = inputConfig.value;
            input.placeholder = inputConfig.placeholder;
            input.className = 'input-base';
            input.style.fontFamily = "monospace";
            input.style.marginBottom = "15px";

            inputElements[index] = input;

            variablesSection.appendChild(label);
            variablesSection.appendChild(input);
        });

        const hint = document.createElement("small");
        hint.textContent = "These variable names will be used in the generated YAML code.";
        Object.assign(hint.style, {
            display: "block", color: "#6c757d", fontSize: "12px", fontStyle: "italic"
        });

        variablesSection.appendChild(hint);
        container.appendChild(variablesSection);

        const buttonsContainer = document.createElement("div");
        Object.assign(buttonsContainer.style, {
            display: "flex", flexDirection: "column", gap: "15px", alignItems: "center"
        });

        const buttonWidth = "280px";

        const beforeOnlyBtn = createButton("Add Steps Before Video Only", "btn-primary");
        beforeOnlyBtn.style.width = buttonWidth;
        beforeOnlyBtn.style.textAlign = "center";

        beforeOnlyBtn.onclick = () => {
            const customVars = {
                tableId: inputElements[0].value.trim() || "Topic.videoTable1",
                relevantVid: inputElements[1].value.trim() || "Topic.relevantVid1",
                stepsBefore: inputElements[2].value.trim() || "Topic.stepsBeforeVid1",
                stepsAfter: inputElements[3].value.trim() || "Topic.stepsAfterVid1"
            };
            animateWindowOut(overlay, () => {
                overlay.remove();
                showStepsInputModal(dataArray, 'before', customVars);
            });
        };

        const afterOnlyBtn = createButton("Add Steps After Video Only", "btn-success");
        afterOnlyBtn.style.width = buttonWidth;
        afterOnlyBtn.style.textAlign = "center";

        afterOnlyBtn.onclick = () => {
            const customVars = {
                tableId: inputElements[0].value.trim() || "Topic.videoTable1",
                relevantVid: inputElements[1].value.trim() || "Topic.relevantVid1",
                stepsBefore: inputElements[2].value.trim() || "Topic.stepsBeforeVid1",
                stepsAfter: inputElements[3].value.trim() || "Topic.stepsAfterVid1"
            };
            animateWindowOut(overlay, () => {
                overlay.remove();
                showStepsInputModal(dataArray, 'after', customVars);
            });
        };

const bothBtn = createButton("Add Both (Before & After Video)", "");
bothBtn.style.width = buttonWidth;
bothBtn.style.textAlign = "center";

        bothBtn.onclick = () => {
            const customVars = {
                tableId: inputElements[0].value.trim() || "Topic.videoTable1",
                relevantVid: inputElements[1].value.trim() || "Topic.relevantVid1",
                stepsBefore: inputElements[2].value.trim() || "Topic.stepsBeforeVid1",
                stepsAfter: inputElements[3].value.trim() || "Topic.stepsAfterVid1"
            };
            animateWindowOut(overlay, () => {
                overlay.remove();
                showStepsInputModal(dataArray, 'both', customVars);
            });
        };

        const cancelBtn = createButton("Cancel", "btn-secondary");
        cancelBtn.style.marginTop = "10px";

        cancelBtn.onclick = () => {
            animateWindowOut(overlay, () => overlay.remove());
        };

        buttonsContainer.appendChild(beforeOnlyBtn);
        buttonsContainer.appendChild(afterOnlyBtn);
        buttonsContainer.appendChild(bothBtn);
        buttonsContainer.appendChild(cancelBtn);
        container.appendChild(buttonsContainer);

        overlay.appendChild(container);
        document.body.appendChild(overlay);

        animateWindowIn(overlay, container);
    }

    function showStepsInputModal(dataArray, mode = 'both', customVars = {}) {
        const vars = {
            tableId: customVars.tableId || 'Topic.videoTable1',
            relevantVid: customVars.relevantVid || 'Topic.relevantVid1',
            stepsBefore: customVars.stepsBefore || 'Topic.stepsBeforeVid1',
            stepsAfter: customVars.stepsAfter || 'Topic.stepsAfterVid1'
        };

        const overlay = document.createElement("div");
        overlay.className = 'modal-overlay';

        const container = document.createElement("div");
        container.className = 'modal-container';
        Object.assign(container.style, {
            width: "95%", maxWidth: "1600px", display: "flex", flexDirection: "column", gap: "20px"
        });

        const title = document.createElement("h2");
        title.textContent = "Add Steps for Video";
        title.style.margin = "0";
        title.style.textAlign = "center";
        container.appendChild(title);

        const variablesDisplay = document.createElement("div");
        Object.assign(variablesDisplay.style, {
            padding: "15px", backgroundColor: "#e9ecef", borderRadius: "6px",
            fontSize: "14px", color: "#495057", fontFamily: "monospace",
            border: "1px solid #ced4da"
        });

        variablesDisplay.innerHTML = `
            <div style="margin-bottom: 8px;"><strong>Video Table:</strong> ${vars.tableId}</div>
            <div style="margin-bottom: 8px;"><strong>Relevant Video:</strong> ${vars.relevantVid}</div>
            <div style="margin-bottom: 8px;"><strong>Steps Before:</strong> ${vars.stepsBefore}</div>
            <div><strong>Steps After:</strong> ${vars.stepsAfter}</div>
        `;

        let beforeEditor, afterEditor;

        if (mode === 'before' || mode === 'both') {
            const beforeLabel = document.createElement("label");
            beforeLabel.textContent = "Enter steps before video here:";
            beforeLabel.style.fontWeight = "bold";
            beforeLabel.style.marginBottom = "8px";
            beforeLabel.style.display = "block";
            container.appendChild(beforeLabel);

            beforeEditor = createRichTextEditor("Enter the steps that should appear before the video...");
            container.appendChild(beforeEditor.element);
        }

        if (mode === 'after' || mode === 'both') {
            const afterLabel = document.createElement("label");
            afterLabel.textContent = "Enter steps after video here:";
            afterLabel.style.fontWeight = "bold";
            afterLabel.style.marginBottom = "8px";
            afterLabel.style.display = "block";
            container.appendChild(afterLabel);

            afterEditor = createRichTextEditor("Enter the steps that should appear after the video...");
            container.appendChild(afterEditor.element);
        }

        const buttonsContainer = document.createElement("div");
        Object.assign(buttonsContainer.style, {
            display: "flex", gap: "15px", justifyContent: "center", marginTop: "10px"
        });

        const generateBtn = createButton("Generate Table & Steps", "btn-success");
        generateBtn.onclick = () => {
            const stepsBefore = beforeEditor ? beforeEditor.getTextContent().trim() : '';
            const stepsAfter = afterEditor ? afterEditor.getTextContent().trim() : '';

            if (!stepsBefore && !stepsAfter) {
                alert("Please enter at least one step.");
                return;
            }

            animateWindowOut(overlay, () => {
                overlay.remove();
                showVariableIdModal(dataArray, stepsBefore, stepsAfter, mode, vars);
            });
        };

        const cancelBtn = createButton("Cancel", "btn-secondary");
        cancelBtn.onclick = () => {
            animateWindowOut(overlay, () => overlay.remove());
        };

        buttonsContainer.appendChild(generateBtn);
        buttonsContainer.appendChild(cancelBtn);
        container.appendChild(buttonsContainer);

        overlay.appendChild(container);
        document.body.appendChild(overlay);

        animateWindowIn(overlay, container);
    }

    function showVariableIdModal(dataArray, stepsBefore, stepsAfter, mode, vars) {
        const overlay = document.createElement("div");
        overlay.className = 'modal-overlay';

        const container = document.createElement("div");
        container.className = 'modal-container';
        Object.assign(container.style, {
            width: "90%", maxWidth: "600px", display: "flex", flexDirection: "column", gap: "20px", textAlign: "left"
        });

        const title = document.createElement("h2");
        title.textContent = "Setup Variable ID";
        Object.assign(title.style, {
            margin: "0", color: "#333", fontSize: "24px", fontWeight: "600", textAlign: "center"
        });
        container.appendChild(title);

        const instructions = document.createElement("div");
        instructions.innerHTML = `
            <p><strong>Follow these steps to get the Variable ID:</strong></p>
            <ol style="line-height: 1.8; color: #495057;">
                <li>Click on <strong>(+)</strong></li>
                <li>Select <strong>Variable Management</strong></li>
                <li>Choose <strong>Set a Variable Value</strong></li>
                <li>Click on <strong>Select a Variable</strong></li>
                <li>Choose <strong>Create a New Variable</strong></li>
                <li>Click on the newly created variable</li>
                <li>Change the Variable Name to <strong>VideoTable1, 2, 3 etc</strong> (depending on how many tables you already have)</li>
                <li>Get the ID from the link</li>
                <li>Paste the ID here:</li>
            </ol>
        `;
        Object.assign(instructions.style, {
            backgroundColor: "#f8f9fa", padding: "20px", borderRadius: "8px",
            border: "1px solid #dee2e6", fontSize: "14px"
        });
        container.appendChild(instructions);

        const inputContainer = document.createElement("div");
        const inputLabel = document.createElement("label");
        inputLabel.textContent = "Variable ID:";
        Object.assign(inputLabel.style, {
            display: "block", fontWeight: "bold", marginBottom: "8px", color: "#495057"
        });

        const idInput = document.createElement("input");
        idInput.type = "text";
        idInput.placeholder = "Enter the variable ID here...";
        idInput.className = 'input-base';
        idInput.style.fontFamily = "monospace";
        idInput.style.fontSize = "16px";

        inputContainer.appendChild(inputLabel);
        inputContainer.appendChild(idInput);
        container.appendChild(inputContainer);

        const buttonsContainer = document.createElement("div");
        Object.assign(buttonsContainer.style, {
            display: "flex", gap: "15px", justifyContent: "center"
        });

        const continueBtn = createButton("Continue", "btn-success");
        continueBtn.onclick = () => {
            const variableId = idInput.value.trim();
            if (!variableId) {
                alert("Please enter a Variable ID.");
                return;
            }
            animateWindowOut(overlay, () => {
                overlay.remove();
                showGeneratedCode(dataArray, stepsBefore, stepsAfter, mode, vars, variableId);
            });
        };

        const cancelBtn = createButton("Cancel", "btn-secondary");
        cancelBtn.onclick = () => {
            animateWindowOut(overlay, () => overlay.remove());
        };

        buttonsContainer.appendChild(continueBtn);
        buttonsContainer.appendChild(cancelBtn);
        container.appendChild(buttonsContainer);

        overlay.appendChild(container);
        document.body.appendChild(overlay);

        animateWindowIn(overlay, container);
    }

    function generateRandomId() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        let result = '';
        for (let i = 0; i < 7; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    }

    async function showGeneratedCode(dataArray, stepsBefore, stepsAfter, mode, customVars = {}, variableId = null) {
        const vars = {
            tableId: customVars.tableId || 'Topic.videoTable1',
            relevantVid: customVars.relevantVid || 'Topic.relevantVid1',
            stepsBefore: customVars.stepsBefore || 'Topic.stepsBeforeVid1',
            stepsAfter: customVars.stepsAfter || 'Topic.stepsAfterVid1'
        };

        addCompactStyles();

        const overlay = document.createElement("div");
        overlay.className = 'modal-overlay';

        const container = document.createElement("div");
        container.className = 'modal-container';
        Object.assign(container.style, {
            width: "calc(100vw - 60px)", maxWidth: "none", display: "flex", flexDirection: "column", gap: "20px"
        });

        const titleContainer = document.createElement("div");
        Object.assign(titleContainer.style, {
            display: "flex", alignItems: "center", justifyContent: "center", gap: "10px", margin: "0"
        });

        const title = document.createElement("h2");
        title.textContent = "Generating Table & Steps Code ";
        title.style.margin = "0";
        titleContainer.appendChild(title);

        const spinner = document.createElement("div");
        Object.assign(spinner.style, {
            width: "24px", height: "24px", border: "3px solid #f3f3f3",
            borderTop: "3px solid #007bff", borderRadius: "50%", animation: "spin 1s linear infinite"
        });

        titleContainer.appendChild(spinner);
        const progressSpan = document.createElement("span");
        Object.assign(progressSpan.style, {
            color: "#007bff", fontSize: "18px", fontWeight: "bold", marginLeft: "10px"
        });
        titleContainer.appendChild(progressSpan);
        container.appendChild(titleContainer);

        const codeContainer = document.createElement("div");
        codeContainer.className = "vscode-container";

        const vscodeHeader = document.createElement("div");
        vscodeHeader.className = "vscode-header";

        const tabContainer = document.createElement("div");
        tabContainer.style.display = "flex";

        const tab = document.createElement("div");
        tab.className = "vscode-tab";

        const storedTitle = await GM_getValue("selected_video_title", "generated-code");
        const cleanTitle = storedTitle.replace(/[<>:"/\\|?*]/g, '-').substring(0, 50);

        tab.innerHTML = `
            <span style="color: #4FC1FF;">📄</span>
            <span>${cleanTitle}.yaml</span>
            <span style="color: #858585; margin-left: auto;">×</span>
        `;
        tabContainer.appendChild(tab);
        vscodeHeader.appendChild(tabContainer);
        codeContainer.appendChild(vscodeHeader);

        const vscodeContent = document.createElement("div");
        vscodeContent.className = "vscode-content";

        const lineNumbers = document.createElement("div");
        lineNumbers.className = "vscode-line-numbers";

        const copyBtn = createButton("Please wait", "btn-secondary");
        Object.assign(copyBtn.style, {
            position: "absolute", right: "16px", top: "16px", zIndex: "10",
            fontSize: "12px", fontFamily: "system-ui", cursor: "not-allowed"
        });
        copyBtn.disabled = true;

        const codeDisplay = document.createElement("div");
        codeDisplay.className = "vscode-code-display";

        const updateLineNumbers = (text) => {
            const lines = text.split('\n');
            const lineNumbersHtml = lines.map((_, index) =>
                `<div>${index + 1}</div>`
            ).join('');
            lineNumbers.innerHTML = lineNumbersHtml;
        };

        codeDisplay.addEventListener('scroll', () => {
            lineNumbers.scrollTop = codeDisplay.scrollTop;
        });

        const randomId1 = generateRandomId();
        const randomId2 = generateRandomId();
        const randomId3 = generateRandomId();
        const randomId4 = generateRandomId();
        const randomId5 = generateRandomId();

        const tableEntries = dataArray.map(({lc, thumbnail, embedURL}) => {
            const shortLC = getShortLC(lc);
            let refID = "";
            try {
                const urlObj = new URL(embedURL);
                const videoIdParam = urlObj.searchParams.get("videoId") || "";
                if(videoIdParam.startsWith("ref:")) {
                    refID = videoIdParam.substring(4);
                }
            } catch {
                refID = "";
            }
            return `             {lc:"${shortLC}",Thumbnail:"${thumbnail}",embedURL:"${embedURL}",refID:"${refID}"}`;
        });

        const formatSteps = (steps) => {
            if (!steps) return '';
            return steps.split('\n').map(line => {
                const trimmedLine = line.trim();
                if (trimmedLine) {
                    return '            ' + trimmedLine;
                }
                return '';
            }).filter(line => line).join('\n');
        };

        let generatedCode = `        - kind: SetVariable
          id: ${variableId ? `setVariable_${variableId}` : `setVariable_${randomId1}`}
          variable: ${vars.tableId}
          value: |-
            =Table(
${tableEntries.join(",\n")}
              )

        - kind: SetVariable
          id: setVariable_${randomId2}
          variable: ${vars.relevantVid}
          value: =LookUp(${vars.tableId},lc=Global.lc)`;

        if ((mode === 'before' || mode === 'both') && stepsBefore) {
            generatedCode += `

        - kind: SetTextVariable
          id: setVariable_${randomId3}
          variable: ${vars.stepsBefore}
          value: |-
${formatSteps(stepsBefore)}`;
        }

        if ((mode === 'after' || mode === 'both') && stepsAfter) {
            generatedCode += `

        - kind: SetTextVariable
          id: setVariable_${randomId4}
          variable: ${vars.stepsAfter}
          value: |-
${formatSteps(stepsAfter)}`;
        }

        generatedCode += `

        - kind: SendActivity
          id: ${randomId5}
          activity:
            attachments:
              - kind: AdaptiveCardTemplate
                cardContent: |-
                  {
                    "type": "AdaptiveCard",
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    "version": "1.0",
                            body: [`;

        if ((mode === 'before' || mode === 'both') && stepsBefore) {
            generatedCode += `
                              {
                             type: "TextBlock",
                          text: ${vars.stepsBefore},
                                                   wrap: true
                                 },`;
        }

        generatedCode += `
                                 {
                                  type: "Media",
                                 id: "embedbrightcovevideo",
                               poster: ${vars.relevantVid}.thumbnail,
                     sources: {
                   url: ${vars.relevantVid}.embedURL
                    }
                    },
                   {
                  type: "TextBlock",
                  text: " ",
                    wrap: true
                   }`;

        if ((mode === 'after' || mode === 'both') && stepsAfter) {
            generatedCode += `,
                   {
                   type: "TextBlock",
                   text: ${vars.stepsAfter},
                   wrap: true
                   }`;
        }

        generatedCode += `

        - kind: SendActivity
          id: ${randomId5}
          activity:
            attachments:
              - kind: AdaptiveCardTemplate
                cardContent: |-
                  {
                    type: "AdaptiveCard",
                    '$schema': "http://adaptivecards.io/schemas/adaptive-card.json",
                    version: "1.0",
                    body: [
                      {
                        type: "TextBlock",
                        text: ${vars.stepsBefore},
                        wrap: true
                      },
                      {
                        type: "Media",
                        id: "embedbrightcovevideo",
                        poster: ${vars.relevantVid}.Thumbnail,
                        sources: {
                          url: ${vars.relevantVid}.embedURL
                        }
                      },
                      {
                        type: "TextBlock",
                        text: " ",
                        wrap: true
                      },
                      {
                        type: "TextBlock",
                        text: ${vars.stepsAfter},
                        wrap: true
                      }
                    ],
                    actions: []
                  }

        - kind: SendActivity
          id: sendActivity_${randomId1}
          activity:
            kind: EventActivity
            value: =${vars.relevantVid}.refID
            name: EmbedBrightcoveVideo`;

        const typeWriter = () => {
            const startTime = Date.now();
            const duration = 6500;

            const animate = () => {
                const elapsed = Date.now() - startTime;
                const progress = Math.min(elapsed / duration, 1);

                const currentIndex = Math.floor(progress * generatedCode.length);
                const currentText = generatedCode.substring(0, currentIndex);

                codeDisplay.innerHTML = applySyntaxHighlighting(currentText);
                codeDisplay.scrollTop = codeDisplay.scrollHeight;
                updateLineNumbers(currentText);

                const percentage = Math.round(progress * 100);
                progressSpan.textContent = `${percentage}%`;

                if (progress < 1) {
                    requestAnimationFrame(animate);
                } else {
    updateLineNumbers(generatedCode);
    title.textContent = "Table & Steps generated ";
    progressSpan.remove();

    const checkmark = document.createElement("span");
    checkmark.textContent = "✓";
    Object.assign(checkmark.style, {
        color: "#28a745", fontSize: "24px", fontWeight: "bold"
    });
    spinner.replaceWith(checkmark);

    copyBtn.disabled = false;
    copyBtn.textContent = "Copy Code";
    copyBtn.style.cursor = "pointer";

addToYamlBtn.style.display = "block";
previewBtn.style.display = "block";                }
            };

            requestAnimationFrame(animate);
        };

        copyBtn.onclick = () => {
            navigator.clipboard.writeText(generatedCode).then(() => {
                copyBtn.textContent = "Copied!";
                setTimeout(() => {
                    copyBtn.textContent = "Copy Code";
                    copyBtn.className = "btn-base btn-primary";
                }, 2000);
            }).catch(() => {
                const textArea = document.createElement('textarea');
                textArea.value = generatedCode;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                copyBtn.textContent = "Copied!";
                copyBtn.className = "btn-base btn-success";
                setTimeout(() => {
                    copyBtn.textContent = "Copy Code";
                    copyBtn.className = "btn-base btn-primary";
                }, 2000);
            });
        };

        vscodeContent.appendChild(lineNumbers);
        vscodeContent.appendChild(codeDisplay);
        vscodeContent.appendChild(copyBtn);
        codeContainer.appendChild(vscodeContent);

        container.appendChild(codeContainer);

        setTimeout(typeWriter, 300);

const buttonsContainer = document.createElement("div");
Object.assign(buttonsContainer.style, {
    display: "flex", gap: "15px", alignItems: "center", justifyContent: "flex-end"
});

const addToYamlBtn = createButton("Add to my YAML code", "btn-primary");
addToYamlBtn.style.display = "none";

addToYamlBtn.onclick = () => {
    GM_setValue("temp_generated_code", generatedCode);
    GM_setValue("temp_variable_id", variableId ? `setVariable_${variableId}` : `setVariable_${randomId1}`);
    showYamlIntegrationModal();
};

const previewBtn = createButton("Preview", "btn-warning");
previewBtn.style.display = "none";

previewBtn.onclick = () => {
    showPreviewModal(dataArray, stepsBefore, stepsAfter, mode, vars);
};

const closeBtn = createButton("Close", "btn-secondary");
closeBtn.onclick = () => {
    animateWindowOut(overlay, () => overlay.remove());
};

buttonsContainer.appendChild(previewBtn);
buttonsContainer.appendChild(addToYamlBtn);
buttonsContainer.appendChild(closeBtn);
container.appendChild(buttonsContainer);

        container.appendChild(closeBtn);
        overlay.appendChild(container);
        document.body.appendChild(overlay);

        animateWindowIn(overlay, container);

setTimeout(async () => {
    await GM_setValue("selected_languages", []);
    await GM_setValue("wait_time", 3);
    await GM_setValue("video_data", []);
    await GM_setValue("skipped_languages", []);
    await GM_setValue("original_document_url", "");
    await GM_setValue("selected_index", null);
    await GM_setValue("current_lang_index", 0);
    await GM_setValue("total_languages", 0);
    await GM_setValue("selected_video_title", "");

}, 1000);
    }

    function showYamlIntegrationModal() {
    const overlay = document.createElement("div");
    overlay.className = 'modal-overlay';

    const container = document.createElement("div");
    container.className = 'modal-container';
    Object.assign(container.style, {
        width: "calc(100vw - 60px)", maxWidth: "none", display: "flex", flexDirection: "column", gap: "20px"
    });

    const title = document.createElement("h2");
    title.textContent = "Paste your full YAML topic here";
    Object.assign(title.style, { margin: "0", textAlign: "center" });
    container.appendChild(title);

    const codeContainer = document.createElement("div");
    codeContainer.className = "vscode-container";

    const vscodeHeader = document.createElement("div");
    vscodeHeader.className = "vscode-header";
    const tab = document.createElement("div");
    tab.className = "vscode-tab";
    tab.innerHTML = `<span style="color: #4FC1FF;">📄</span><span>your-yaml-topic.yaml</span>`;
    vscodeHeader.appendChild(tab);
    codeContainer.appendChild(vscodeHeader);

    const vscodeContent = document.createElement("div");
    vscodeContent.className = "vscode-content";

    const lineNumbers = document.createElement("div");
    lineNumbers.className = "vscode-line-numbers";

    const codeTextarea = document.createElement("textarea");
    Object.assign(codeTextarea.style, {
        width: "100%", height: "500px", padding: "16px", paddingLeft: "66px",
        backgroundColor: "#1e1e1e", color: "#d4d4d4", border: "none", outline: "none",
        fontFamily: "'Consolas', 'Monaco', 'Courier New', monospace", fontSize: "14px",
        lineHeight: "21px", resize: "none", position: "relative", zIndex: "1"
    });
    codeTextarea.placeholder = "Paste your full YAML topic code here...";

    const updateLineNumbers = () => {
        const lines = codeTextarea.value.split('\n');
        lineNumbers.innerHTML = lines.map((_, i) => `<div>${i + 1}</div>`).join('');
    };

    codeTextarea.addEventListener('input', updateLineNumbers);
    codeTextarea.addEventListener('scroll', () => {
        lineNumbers.scrollTop = codeTextarea.scrollTop;
    });

    vscodeContent.appendChild(lineNumbers);
    vscodeContent.appendChild(codeTextarea);
    codeContainer.appendChild(vscodeContent);
    container.appendChild(codeContainer);

    const buttonsContainer = document.createElement("div");
    Object.assign(buttonsContainer.style, {
        display: "flex", gap: "15px", justifyContent: "center"
    });

    const integrateBtn = createButton("Integrate", "btn-success");
    integrateBtn.onclick = async () => {
        const yamlCode = codeTextarea.value.trim();
        if (!yamlCode) {
            alert("Please paste your YAML code first.");
            return;
        }
        const result = await integrateGeneratedCode(yamlCode);
        showIntegratedResult(result, overlay);
    };

    const cancelBtn = createButton("Cancel", "btn-secondary");
    cancelBtn.onclick = () => {
        animateWindowOut(overlay, () => overlay.remove());
    };

    buttonsContainer.appendChild(integrateBtn);
    buttonsContainer.appendChild(cancelBtn);
    container.appendChild(buttonsContainer);

overlay.appendChild(container);
document.body.appendChild(overlay);
animateWindowIn(overlay, container);

    updateLineNumbers();
    animateWindowIn(overlay, container);
}

async function integrateGeneratedCode(yamlCode) {
    const generatedCode = await GM_getValue("temp_generated_code", "");
    const targetVariableId = await GM_getValue("temp_variable_id", "");

    if (!generatedCode || !targetVariableId) {
        return { success: false, message: "Generated code not found. Please generate code first." };
    }

    const targetPattern = new RegExp(`(-\\s*kind:\\s*SetVariable\\s+id:\\s*${targetVariableId})(.*?)(?=\\n\\s*-\\s*kind:|$)`, 'gs');
    const match = yamlCode.match(targetPattern);

    if (!match) {
        return { success: false, message: `Variable ID "${targetVariableId}" not found in your YAML code.` };
    }

    const integratedCode = yamlCode.replace(targetPattern, '\n' + generatedCode);
    return { success: true, code: integratedCode };
}

function showPreviewModal(dataArray, stepsBefore, stepsAfter, mode, vars) {
    const overlay = document.createElement("div");
    overlay.className = 'modal-overlay';

    const container = document.createElement("div");
    container.className = 'modal-container';
    Object.assign(container.style, {
        width: "90%",
        maxWidth: "500px",
        display: "flex",
        flexDirection: "column",
        backgroundColor: "#fff",
        borderRadius: "12px",
        boxShadow: "0 8px 24px rgba(0,0,0,0.15)",
        position: "relative",
        maxHeight: "80vh",
        overflow: "hidden"
    });

    const closeBtn = document.createElement("button");
    closeBtn.innerHTML = "✕";
    Object.assign(closeBtn.style, {
        position: "absolute",
        top: "15px",
        right: "15px",
        width: "30px",
        height: "30px",
        backgroundColor: "transparent",
        border: "none",
        fontSize: "18px",
        color: "#fff",
        cursor: "pointer",
        borderRadius: "50%",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        zIndex: "1000"
    });

    closeBtn.onmouseover = () => {
        closeBtn.style.backgroundColor = "rgba(255, 255, 255, 0.2)";
        closeBtn.style.color = "#fff";
    };

    closeBtn.onmouseout = () => {
        closeBtn.style.backgroundColor = "transparent";
        closeBtn.style.color = "#fff";
    };

    closeBtn.onclick = () => {
        animateWindowOut(overlay, () => overlay.remove());
    };

    container.appendChild(closeBtn);

    const header = document.createElement("div");
    Object.assign(header.style, {
        display: "flex",
        alignItems: "center",
        gap: "10px",
        backgroundColor: "#0096d6",
        padding: "15px 20px",
        borderRadius: "12px 12px 0 0",
        position: "sticky",
        top: "0",
        zIndex: "999"
    });

    const hpLogo = document.createElement("img");
    hpLogo.src = "https://virtualagent.hpcloud.hp.com/Content/Images/Toronto_icons_white_HP.png";
    hpLogo.alt = "HP Logo";
    Object.assign(hpLogo.style, {
        width: "24px",
        height: "24px",
        objectFit: "contain"
    });

    const headerTitle = document.createElement("h2");
    headerTitle.textContent = "Virtual Assistant Preview";
    Object.assign(headerTitle.style, {
        margin: "0",
        color: "#fff",
        fontSize: "18px",
        fontWeight: "600"
    });

    header.appendChild(hpLogo);
    header.appendChild(headerTitle);
    container.appendChild(header);

    const currentLC = window.location.pathname.split("/")[1];
    const previewVideo = dataArray.find(item => item.lc === currentLC) || dataArray[0];

    const mainContent = document.createElement("div");
    Object.assign(mainContent.style, {
        display: "flex",
        flexDirection: "column",
        gap: "20px",
        padding: "20px 30px 30px 30px",
        overflow: "auto",
        flex: "1"
    });

    const processText = (text) => {
        if (!text) return '';

        let processedText = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

        processedText = processedText.replace(/!\[(.*?)\]\((.*?)\)/g, '<img src="$2" alt="$1" style="max-width: 100%; height: auto; margin: 10px 0; border-radius: 4px;">');

        processedText = processedText.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" style="color: #007bff; text-decoration: underline;">$1</a>');

        processedText = processedText.replace(/(https?:\/\/[^\s]+\.(jpg|jpeg|png|gif|webp|svg))/gi, '<img src="$1" style="max-width: 100%; height: auto; margin: 10px 0; border-radius: 4px;">');

        processedText = processedText.replace(/^\* (.+)$/gm, '<div style="margin-left: 20px; position: relative;"><span style="position: absolute; left: -15px; top: 0;">•</span>$1</div>');

        processedText = processedText.replace(/^(\d+)\. (.+)$/gm, '<div style="margin-left: 20px; position: relative;"><span style="position: absolute; left: -15px; top: 0; font-weight: bold;">$1.</span>$2</div>');

        processedText = processedText.replace(/\n/g, '<br>');

        return processedText;
    };

    const createStepCard = (html) => {
        const card = document.createElement("div");
        Object.assign(card.style, {
            padding: "20px",
            backgroundColor: "#f9f9f9",
            borderRadius: "8px",
            fontSize: "14px",
            lineHeight: "1.6",
            color: "#333",
            boxShadow: "0 2px 6px rgba(0,0,0,0.05)"
        });
        card.innerHTML = processText(html);
        return card;
    };

    if ((mode === 'before' || mode === 'both') && stepsBefore) {
        const beforeCard = createStepCard(stepsBefore);
        mainContent.appendChild(beforeCard);
    }

    const videoSection = document.createElement("div");
    Object.assign(videoSection.style, {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        gap: "15px",
        margin: "20px 0"
    });

    const videoWrapper = document.createElement("div");
    Object.assign(videoWrapper.style, {
        position: "relative",
        width: "100%",
        maxWidth: "400px",
        borderRadius: "8px",
        overflow: "hidden",
        boxShadow: "0 4px 12px rgba(0,0,0,0.2)"
    });

    const videoThumbnail = document.createElement("img");
    videoThumbnail.src = previewVideo.thumbnail;
    videoThumbnail.alt = previewVideo.title || "Video thumbnail";
    Object.assign(videoThumbnail.style, {
        width: "100%",
        height: "auto",
        display: "block",
        objectFit: "cover"
    });

    const playButton = document.createElement("div");
    Object.assign(playButton.style, {
        position: "absolute",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)",
        width: "60px",
        height: "60px",
        backgroundColor: "rgba(0, 0, 0, 0.7)",
        borderRadius: "50%",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        pointerEvents: "none"
    });

    const playTriangle = document.createElement("div");
    Object.assign(playTriangle.style, {
        width: "0",
        height: "0",
        borderLeft: "20px solid white",
        borderTop: "12px solid transparent",
        borderBottom: "12px solid transparent",
        marginLeft: "4px"
    });

    playButton.appendChild(playTriangle);
    videoWrapper.appendChild(videoThumbnail);
    videoWrapper.appendChild(playButton);
    videoSection.appendChild(videoWrapper);
    mainContent.appendChild(videoSection);
    if ((mode === 'after' || mode === 'both') && stepsAfter) {
        const afterCard = createStepCard(stepsAfter);
        mainContent.appendChild(afterCard);
    }

    container.appendChild(mainContent);

    overlay.appendChild(container);
    document.body.appendChild(overlay);

    animateWindowIn(overlay, container);
}

function showIntegratedResult(result, parentOverlay) {
    if (!result.success) {
        alert(result.message);
        return;
    }

    animateWindowOut(parentOverlay, () => {
        parentOverlay.remove();

        const overlay = document.createElement("div");
        overlay.className = 'modal-overlay';

        const container = document.createElement("div");
        container.className = 'modal-container';
        Object.assign(container.style, {
            width: "calc(100vw - 60px)", maxWidth: "none", display: "flex", flexDirection: "column", gap: "20px"
        });

        const title = document.createElement("h2");
        title.textContent = "✅ Integration Complete";
        Object.assign(title.style, { margin: "0", textAlign: "center", color: "#28a745" });
        container.appendChild(title);

        const codeContainer = document.createElement("div");
        codeContainer.className = "vscode-container";

        const vscodeHeader = document.createElement("div");
        vscodeHeader.className = "vscode-header";
        const tab = document.createElement("div");
        tab.className = "vscode-tab";
        tab.innerHTML = `<span style="color: #4FC1FF;">📄</span><span>integrated-yaml-topic.yaml</span>`;
        vscodeHeader.appendChild(tab);
        codeContainer.appendChild(vscodeHeader);

        const vscodeContent = document.createElement("div");
        vscodeContent.className = "vscode-content";

        const lineNumbers = document.createElement("div");
        lineNumbers.className = "vscode-line-numbers";

        const copyBtn = createButton("Copy Code", "btn-primary");
        Object.assign(copyBtn.style, {
            position: "absolute", right: "16px", top: "16px", zIndex: "10", fontSize: "12px"
        });

        const codeDisplay = document.createElement("div");
        codeDisplay.className = "vscode-code-display";
        codeDisplay.innerHTML = applySyntaxHighlighting(result.code);

        const lines = result.code.split('\n');
        lineNumbers.innerHTML = lines.map((_, i) => `<div>${i + 1}</div>`).join('');

        copyBtn.onclick = () => {
            navigator.clipboard.writeText(result.code).then(() => {
                copyBtn.textContent = "Copied!";
                setTimeout(() => copyBtn.textContent = "Copy Code", 2000);
            });
        };

        vscodeContent.appendChild(lineNumbers);
        vscodeContent.appendChild(codeDisplay);
        vscodeContent.appendChild(copyBtn);
        codeContainer.appendChild(vscodeContent);
        container.appendChild(codeContainer);

        const closeBtn = createButton("Close", "btn-secondary");
        closeBtn.style.alignSelf = "flex-end";
        closeBtn.onclick = () => animateWindowOut(overlay, () => overlay.remove());
        container.appendChild(closeBtn);

        overlay.appendChild(container);
        document.body.appendChild(overlay);
        animateWindowIn(overlay, container);
    });
}
    async function init() {
        addCompactStyles();
        const extractBtn = createExtractButton();
        await updateExtractButtonForVideos();
        continueExtractionAfterLoad();
    }

    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", init);
    } else {
        init();
    }

})();
